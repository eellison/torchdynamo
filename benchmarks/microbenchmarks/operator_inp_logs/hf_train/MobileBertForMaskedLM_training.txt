Operator: aten._log_softmax.default
cnt: 1, '((T([8192, 30522], th.float16), 1, False), {})'
Operator: aten._log_softmax_backward_data.default
cnt: 1, '((T([8192, 30522], th.float16), T([8192, 30522], th.float16), 1, th.float16), {})'
Operator: aten._softmax.default
cnt: 24, '((T([16, 4, 512, 512], th.float16), -1, False), {})'
Operator: aten._softmax_backward_data.default
cnt: 24, '((T([16, 4, 512, 512], th.float16), T([16, 4, 512, 512], th.float16), -1, th.float16), {})'
Operator: aten._to_copy.default
cnt: 1, "((T([16, 1, 1, 512], th.float32),), {'dtype': th.float16})"
Operator: aten._unsafe_view.default
cnt: 72, '((T([16, 4, 512, 32], th.float16), [64, 512, 32]), {})'
cnt: 24, '((T([16, 4, 32, 512], th.float16), [64, 32, 512]), {})'
cnt: 24, '((T([64, 512, 512], th.float16), [16, 4, 512, 512]), {})'
cnt: 24, '((T([64, 512, 32], th.float16), [16, 4, 512, 32]), {})'
cnt: 1, '((T([8192, 30522], th.float16), [16, 512, 30522]), {})'
cnt: 48, '((T([16, 512, 4, 32], th.float16), [16, 512, 128]), {})'
cnt: 24, '((T([16, 512, 128], th.float16), [8192, 128]), {})'
Operator: aten.add.Tensor
cnt: 1, '((T([16, 512, 512], th.float16), T([1, 512, 512], th.float16)), {})'
cnt: 97, '((T([16, 512, 512], th.float16), T([16, 512, 512], th.float16)), {})'
cnt: 25, '((T([16, 512, 512], th.float16), T([512], th.float16)), {})'
cnt: 168, '((T([16, 512, 128], th.float16), T([128], th.float16)), {})'
cnt: 24, '((T([16, 4, 512, 512], th.float16), T([16, 1, 1, 512], th.float16)), {})'
cnt: 241, '((T([16, 512, 128], th.float16), T([16, 512, 128], th.float16)), {})'
cnt: 1, '((T([16, 512, 128], th.float16, (196608, 384, 1)), T([16, 512, 128], th.float16)), {})'
cnt: 1, '((T([30522, 128], th.float16, (1, 30522)), T([30522, 128], th.float16)), {})'
Operator: aten.add_.Tensor
cnt: 1, '((T([16, 512, 30522], th.float16), T([30522], th.float16)), {})'
Operator: aten.addmm.default
cnt: 1, '((T([512], th.float16), T([8192, 384], th.float16), T([384, 512], th.float16, (1, 384))), {})'
cnt: 168, '((T([128], th.float16), T([8192, 512], th.float16), T([512, 128], th.float16, (1, 512))), {})'
cnt: 72, '((T([128], th.float16), T([8192, 128], th.float16), T([128, 128], th.float16, (1, 128))), {})'
cnt: 120, '((T([512], th.float16), T([8192, 128], th.float16), T([128, 512], th.float16, (1, 128))), {})'
cnt: 1, '((T([512], th.float16), T([8192, 512], th.float16), T([512, 512], th.float16, (1, 512))), {})'
Operator: aten.bmm.default
cnt: 24, '((T([64, 512, 32], th.float16), T([64, 32, 512], th.float16)), {})'
cnt: 24, '((T([64, 512, 512], th.float16), T([64, 512, 32], th.float16)), {})'
cnt: 24, '((T([64, 512, 512], th.float16, (262144, 1, 512)), T([64, 512, 32], th.float16)), {})'
cnt: 24, '((T([64, 512, 32], th.float16), T([64, 32, 512], th.float16, (16384, 1, 32))), {})'
cnt: 24, '((T([64, 32, 512], th.float16, (16384, 1, 32)), T([64, 512, 512], th.float16)), {})'
cnt: 24, '((T([64, 512, 512], th.float16), T([64, 512, 32], th.float16, (16384, 1, 512))), {})'
Operator: aten.cat.default
cnt: 1, '(([T([16, 512, 128], th.float16), T([16, 512, 128], th.float16), T([16, 512, 128], th.float16)], 2), {})'
cnt: 1, '(([T([128, 30522], th.float16, (1, 128)), T([384, 30522], th.float16)],), {})'
Operator: aten.clone.default
cnt: 2, '((T([16, 512], th.int64),), {})'
Operator: aten.constant_pad_nd.default
cnt: 1, '((T([16, 511, 128], th.float16, (65536, 128, 1)), [0, 0, 0, 1, 0, 0], 0.0), {})'
cnt: 1, '((T([16, 511, 128], th.float16, (65536, 128, 1)), [0, 0, 1, 0, 0, 0], 0.0), {})'
cnt: 1, '((T([16, 512, 128], th.float16, (196608, 384, 1)), [0, 0, -1, 0, 0, 0]), {})'
cnt: 1, '((T([16, 512, 128], th.float16, (196608, 384, 1)), [0, 0, 0, -1, 0, 0]), {})'
Operator: aten.copy_.default
cnt: 2, '((T([16, 512], th.int64), T([16, 512], th.int64)), {})'
cnt: 1, '((T([30522, 128], th.float16), T([30522, 128], th.float16, (1, 30522))), {})'
Operator: aten.div.Tensor
cnt: 48, '((T([16, 4, 512, 512], th.float16), 5.656854249492381), {})'
Operator: aten.embedding.default
cnt: 1, '((T([30522, 128], th.float16), T([16, 512], th.int64), 0), {})'
cnt: 1, '((T([512, 512], th.float16), T([1, 512], th.int64)), {})'
cnt: 1, '((T([2, 512], th.float16), T([16, 512], th.int64)), {})'
Operator: aten.embedding_dense_backward.default
cnt: 1, '((T([16, 512, 512], th.float16), T([16, 512], th.int64), 2, -1, False), {})'
cnt: 1, '((T([1, 512, 512], th.float16), T([1, 512], th.int64), 512, -1, False), {})'
cnt: 1, '((T([16, 512, 128], th.float16), T([16, 512], th.int64), 30522, 0, False), {})'
Operator: aten.mm.default
cnt: 1, '((T([8192, 512], th.float16), T([512, 30522], th.float16)), {})'
cnt: 1, '((T([512, 8192], th.float16, (1, 512)), T([8192, 30522], th.float16)), {})'
cnt: 1, '((T([8192, 30522], th.float16), T([30522, 512], th.float16, (1, 30522))), {})'
cnt: 1, '((T([8192, 512], th.float16), T([512, 512], th.float16)), {})'
cnt: 1, '((T([512, 8192], th.float16, (1, 512)), T([8192, 512], th.float16)), {})'
cnt: 120, '((T([8192, 512], th.float16), T([512, 128], th.float16)), {})'
cnt: 120, '((T([512, 8192], th.float16, (1, 512)), T([8192, 128], th.float16)), {})'
cnt: 168, '((T([8192, 128], th.float16), T([128, 512], th.float16)), {})'
cnt: 168, '((T([128, 8192], th.float16, (1, 128)), T([8192, 512], th.float16)), {})'
cnt: 72, '((T([8192, 128], th.float16), T([128, 128], th.float16)), {})'
cnt: 72, '((T([128, 8192], th.float16, (1, 128)), T([8192, 128], th.float16)), {})'
cnt: 1, '((T([8192, 512], th.float16), T([512, 384], th.float16)), {})'
cnt: 1, '((T([512, 8192], th.float16, (1, 512)), T([8192, 384], th.float16)), {})'
Operator: aten.mul.Tensor
cnt: 1, '((T([16, 1, 1, 512], th.float16), -10000.0), {})'
cnt: 50, '((T([16, 512, 512], th.float16), T([512], th.float16)), {})'
cnt: 336, '((T([16, 512, 128], th.float16), T([128], th.float16)), {})'
cnt: 25, '((T([16, 512, 512], th.float16), T([16, 512, 512], th.float16)), {})'
cnt: 168, '((T([16, 512, 128], th.float16), T([16, 512, 128], th.float16)), {})'
Operator: aten.native_layer_norm.default
cnt: 1, '((T([16, 512, 512], th.float16), [512], T([512], th.float16), T([512], th.float16), 1e-12), {})'
Operator: aten.native_layer_norm_backward.default
cnt: 1, '((T([16, 512, 512], th.float16), T([16, 512, 512], th.float16), [512], T([16, 512, 1], th.float32), T([16, 512, 1], th.float32), T([512], th.float16), T([512], th.float16), [True, True, True]), {})'
Operator: aten.new_empty_strided.default
cnt: 1, '((T([30522, 128], th.float16, (1, 30522)), [30522, 128], [128, 1]), {\'device\': "th.device(\'cuda\')", \'dtype\': th.float16, \'layout\': th.strided})'
Operator: aten.nll_loss_backward.default
cnt: 1, '((T([], th.float16), T([8192, 30522], th.float16), T([8192], th.int64), None, 1, -100, T([], th.float16)), {})'
Operator: aten.nll_loss_forward.default
cnt: 1, '((T([8192, 30522], th.float16), T([8192], th.int64), None, 1, -100), {})'
Operator: aten.relu.default
cnt: 97, '((T([16, 512, 512], th.float16),), {})'
Operator: aten.rsub.Scalar
cnt: 1, '((T([16, 1, 1, 512], th.float16), 1.0), {})'
Operator: aten.slice_backward.default
cnt: 1, '((T([16, 511, 128], th.float16), [16, 512, 128], 1, 0, -1, 1), {})'
cnt: 2, '((T([16, 512, 128], th.float16), [16, 512, 128], 0, 0, 9223372036854775807, 1), {})'
cnt: 1, '((T([16, 511, 128], th.float16), [16, 512, 128], 1, 1, 9223372036854775807, 1), {})'
Operator: aten.sum.SymInt
cnt: 1, '((T([16, 512, 30522], th.float16), [0, 1], True), {})'
cnt: 122, '((T([8192, 512], th.float16), [0], True), {})'
cnt: 50, '((T([16, 512, 512], th.float16), [0, 1], True), {})'
cnt: 336, '((T([16, 512, 128], th.float16), [0, 1], True), {})'
cnt: 240, '((T([8192, 128], th.float16), [0], True), {})'
cnt: 1, '((T([16, 512, 512], th.float16), [0], True), {})'
Operator: aten.threshold_backward.default
cnt: 97, '((T([16, 512, 512], th.float16), T([16, 512, 512], th.float16), 0), {})'
