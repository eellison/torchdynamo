Operator: aten._log_softmax.default
cnt: 1, '((T([2048, 250112], th.float16), 1, False), {})'
Operator: aten._log_softmax_backward_data.default
cnt: 1, '((T([2048, 250112], th.float16), T([2048, 250112], th.float16), 1, th.float16), {})'
Operator: aten._softmax.default
cnt: 24, '((T([4, 6, 512, 512], th.float32), -1, False), {})'
Operator: aten._softmax_backward_data.default
cnt: 24, '((T([4, 6, 512, 512], th.float32), T([4, 6, 512, 512], th.float32), -1, th.float32), {})'
Operator: aten._to_copy.default
cnt: 2, '((T([4, 512], th.float32),), {\'device\': "th.device(\'cuda\')", \'dtype\': th.float32, \'layout\': th.strided})'
cnt: 1, "((T([4, 1, 1, 512], th.float32),), {'dtype': th.float16})"
cnt: 1, "((T([512, 512], th.bool),), {'dtype': th.int64})"
cnt: 2, "((T([512, 512], th.int64),), {'dtype': th.float32})"
cnt: 2, "((T([512, 512], th.float32),), {'dtype': th.int64})"
cnt: 24, "((T([4, 6, 512, 512], th.float16),), {'dtype': th.float32})"
cnt: 48, '((T([4, 6, 512, 512], th.float32),), {\'device\': "th.device(\'cuda\')", \'dtype\': th.float16, \'layout\': th.strided})'
cnt: 1, "((T([4, 512, 512], th.bool),), {'dtype': th.float32})"
cnt: 1, "((T([4, 1, 512, 512], th.float32),), {'dtype': th.float16})"
cnt: 1, "((T([4, 1, 1, 512], th.int64),), {'dtype': th.float16})"
cnt: 24, '((T([4, 6, 512, 512], th.float16),), {\'device\': "th.device(\'cuda\')", \'dtype\': th.float32, \'layout\': th.strided})'
Operator: aten._unsafe_view.default
cnt: 72, '((T([2048, 384], th.float16), [4, 512, 384]), {})'
cnt: 72, '((T([4, 6, 512, 64], th.float16), [24, 512, 64]), {})'
cnt: 24, '((T([4, 6, 64, 512], th.float16), [24, 64, 512]), {})'
cnt: 24, '((T([24, 512, 512], th.float16), [4, 6, 512, 512]), {})'
cnt: 24, '((T([24, 512, 64], th.float16), [4, 6, 512, 64]), {})'
cnt: 40, '((T([2048, 512], th.float16), [4, 512, 512]), {})'
cnt: 32, '((T([2048, 1024], th.float16), [4, 512, 1024]), {})'
cnt: 1, '((T([2048, 250112], th.float16), [4, 512, 250112]), {})'
cnt: 48, '((T([4, 512, 6, 64], th.float16), [4, 512, 384]), {})'
cnt: 24, '((T([4, 512, 384], th.float16), [2048, 384]), {})'
Operator: aten.abs.default
cnt: 1, '((T([512, 512], th.int64),), {})'
Operator: aten.add.Tensor
cnt: 2, '((T([512, 512], th.int64), 0), {})'
cnt: 1, '((T([512, 512], th.int64), 8), {})'
cnt: 1, '((T([1, 6, 512, 512], th.float16, (6, 1, 3072, 6)), T([4, 1, 1, 512], th.float16)), {})'
cnt: 143, '((T([4, 512, 512], th.float16), T([4, 512, 512], th.float16)), {})'
cnt: 48, '((T([4, 512, 1024], th.float16), T([4, 512, 1024], th.float16)), {})'
cnt: 16, '((T([4, 512, 1024], th.float16), 1.0), {})'
cnt: 1, '((T([512, 512], th.int64), 16), {})'
cnt: 1, '((T([1, 6, 512, 512], th.float16, (6, 1, 3072, 6)), T([4, 1, 512, 512], th.float16)), {})'
cnt: 1, '((T([1, 6, 512, 512], th.float16), T([4, 1, 1, 512], th.float16)), {})'
cnt: 14, '((T([4, 6, 512, 512], th.float16), T([4, 6, 512, 512], th.float16)), {})'
cnt: 1, '((T([250112, 512], th.float16), T([250112, 512], th.float16)), {})'
Operator: aten.add_.Tensor
cnt: 1, '((T([512, 512], th.int64), T([512, 512], th.int64)), {})'
cnt: 16, '((T([4, 6, 512, 512], th.float16), T([4, 6, 512, 512], th.float16, (1572864, 1, 3072, 6))), {})'
cnt: 8, '((T([4, 6, 512, 512], th.float16), T([4, 6, 512, 512], th.float16)), {})'
Operator: aten.any.default
cnt: 40, '((T([4, 512, 512], th.bool),), {})'
Operator: aten.bmm.default
cnt: 24, '((T([24, 512, 64], th.float16), T([24, 64, 512], th.float16)), {})'
cnt: 24, '((T([24, 512, 512], th.float16), T([24, 512, 64], th.float16)), {})'
cnt: 24, '((T([24, 512, 512], th.float16, (262144, 1, 512)), T([24, 512, 64], th.float16)), {})'
cnt: 24, '((T([24, 512, 64], th.float16), T([24, 64, 512], th.float16, (32768, 1, 64))), {})'
cnt: 24, '((T([24, 64, 512], th.float16, (32768, 1, 64)), T([24, 512, 512], th.float16)), {})'
cnt: 24, '((T([24, 512, 512], th.float16), T([24, 512, 64], th.float16, (32768, 1, 512))), {})'
Operator: aten.clone.default
cnt: 3, '((T([4, 512], th.int64),), {})'
Operator: aten.copy_.default
cnt: 3, '((T([4, 512], th.int64), T([4, 512], th.int64)), {})'
Operator: aten.div.Tensor
cnt: 1, '((T([512, 512], th.float32), 8), {})'
cnt: 1, '((T([512, 512], th.float32), 2.772588722239781), {})'
cnt: 1, '((T([512, 512], th.float32), 16), {})'
cnt: 1, '((T([512, 512], th.float32), 2.0794415416798357), {})'
Operator: aten.embedding.default
cnt: 2, '((T([250112, 512], th.float16), T([4, 512], th.int64)), {})'
cnt: 2, '((T([32, 6], th.float16), T([512, 512], th.int64)), {})'
Operator: aten.embedding_dense_backward.default
cnt: 2, '((T([512, 512, 6], th.float16, (512, 1, 262144)), T([512, 512], th.int64), 32, -1, False), {})'
cnt: 2, '((T([4, 512, 512], th.float16), T([4, 512], th.int64), 250112, -1, False), {})'
Operator: aten.gt.Scalar
cnt: 1, '((T([512, 512], th.int64), 0), {})'
Operator: aten.isinf.default
cnt: 40, '((T([4, 512, 512], th.float16),), {})'
Operator: aten.le.Tensor
cnt: 1, '((T([4, 512, 512], th.int64), T([1, 512, 1], th.int64)), {})'
Operator: aten.log.default
cnt: 2, '((T([512, 512], th.float32),), {})'
Operator: aten.lt.Scalar
cnt: 1, '((T([512, 512], th.int64), 8), {})'
cnt: 1, '((T([512, 512], th.int64), 16), {})'
Operator: aten.minimum.default
cnt: 3, '((T([512, 512], th.int64), T([512, 512], th.int64)), {})'
Operator: aten.mm.default
cnt: 72, '((T([2048, 512], th.float16), T([512, 384], th.float16, (1, 512))), {})'
cnt: 24, '((T([2048, 384], th.float16), T([384, 512], th.float16, (1, 384))), {})'
cnt: 32, '((T([2048, 512], th.float16), T([512, 1024], th.float16, (1, 512))), {})'
cnt: 16, '((T([2048, 1024], th.float16), T([1024, 512], th.float16, (1, 1024))), {})'
cnt: 1, '((T([2048, 512], th.float16), T([512, 250112], th.float16, (1, 512))), {})'
cnt: 1, '((T([250112, 2048], th.float16, (1, 250112)), T([2048, 512], th.float16)), {})'
cnt: 1, '((T([2048, 250112], th.float16), T([250112, 512], th.float16)), {})'
cnt: 16, '((T([512, 2048], th.float16, (1, 512)), T([2048, 1024], th.float16)), {})'
cnt: 16, '((T([2048, 512], th.float16), T([512, 1024], th.float16)), {})'
cnt: 32, '((T([1024, 2048], th.float16, (1, 1024)), T([2048, 512], th.float16)), {})'
cnt: 32, '((T([2048, 1024], th.float16), T([1024, 512], th.float16)), {})'
cnt: 24, '((T([512, 2048], th.float16, (1, 512)), T([2048, 384], th.float16)), {})'
cnt: 24, '((T([2048, 512], th.float16), T([512, 384], th.float16)), {})'
cnt: 72, '((T([384, 2048], th.float16, (1, 384)), T([2048, 512], th.float16)), {})'
cnt: 72, '((T([2048, 384], th.float16), T([384, 512], th.float16)), {})'
Operator: aten.mul.Scalar
cnt: 16, '((T([4, 512, 1024], th.float16), 3.0), {})'
Operator: aten.mul.Tensor
cnt: 2, '((T([4, 1, 1, 512], th.float16), -10000.0), {})'
cnt: 1, '((T([512, 512], th.int64), 16), {})'
cnt: 1, '((T([512, 512], th.float32), 8), {})'
cnt: 32, '((T([4, 512, 1024], th.float16), 0.5), {})'
cnt: 32, '((T([4, 512, 1024], th.float16), 0.044715), {})'
cnt: 32, '((T([4, 512, 1024], th.float16), 0.7978845608028654), {})'
cnt: 112, '((T([4, 512, 1024], th.float16), T([4, 512, 1024], th.float16)), {})'
cnt: 1, '((T([4, 1, 512, 512], th.float32), T([4, 1, 1, 512], th.float32)), {})'
cnt: 1, '((T([4, 1, 512, 512], th.float16), -10000.0), {})'
cnt: 1, '((T([512, 512], th.float32), 16), {})'
Operator: aten.neg.default
cnt: 1, '((T([512, 512], th.int64),), {})'
Operator: aten.nll_loss_backward.default
cnt: 1, '((T([], th.float16), T([2048, 250112], th.float16), T([2048], th.int64), None, 1, -100, T([], th.float16)), {})'
Operator: aten.nll_loss_forward.default
cnt: 1, '((T([2048, 250112], th.float16), T([2048], th.int64), None, 1, -100), {})'
Operator: aten.pow.Tensor_Scalar
cnt: 16, '((T([4, 512, 1024], th.float16), 3.0), {})'
cnt: 16, '((T([4, 512, 1024], th.float16), 2.0), {})'
Operator: aten.repeat.default
cnt: 1, '((T([1, 1, 512], th.int64), [4, 512, 1]), {})'
Operator: aten.rsub.Scalar
cnt: 2, '((T([4, 1, 1, 512], th.float16), 1.0), {})'
cnt: 1, '((T([4, 1, 512, 512], th.float16), 1.0), {})'
Operator: aten.sub.Tensor
cnt: 2, '((T([1, 512], th.int64), T([512, 1], th.int64)), {})'
Operator: aten.sum.SymInt
cnt: 2, '((T([4, 6, 512, 512], th.float16), [0], True), {})'
Operator: aten.tanh.default
cnt: 16, '((T([4, 512, 1024], th.float16),), {})'
Operator: aten.tanh_backward.default
cnt: 16, '((T([4, 512, 1024], th.float16), T([4, 512, 1024], th.float16)), {})'
Operator: aten.where.self
cnt: 2, '((T([512, 512], th.bool), T([512, 512], th.int64), T([512, 512], th.int64)), {})'
