Operator: aten._log_softmax.default
cnt: 1, '((T([1024, 50358], th.float16), 1, False), {})'
Operator: aten._log_softmax_backward_data.default
cnt: 1, '((T([1024, 50358], th.float16), T([1024, 50358], th.float16), 1, th.float16), {})'
Operator: aten._softmax.default
cnt: 24, '((T([1, 12, 64, 1024], th.float16), -1, False), {})'
cnt: 24, '((T([1, 12, 64, 448], th.float16), -1, False), {})'
cnt: 12, '((T([1, 12, 12, 64, 512], th.float16), -1, False), {})'
Operator: aten._softmax_backward_data.default
cnt: 24, '((T([1, 12, 64, 1024], th.float16), T([1, 12, 64, 1024], th.float16), -1, th.float16), {})'
cnt: 24, '((T([1, 12, 64, 448], th.float16), T([1, 12, 64, 448], th.float16), -1, th.float16), {})'
cnt: 12, '((T([1, 12, 12, 64, 512], th.float16), T([1, 12, 12, 64, 512], th.float16), -1, th.float16), {})'
Operator: aten._to_copy.default
cnt: 12, "((T([1, 1, 12, 64, 192], th.float32),), {'dtype': th.float16})"
cnt: 12, "((T([1, 1, 1024, 1], th.float32),), {'dtype': th.float16})"
cnt: 12, "((T([1, 1, 1, 1024], th.float32),), {'dtype': th.float16})"
cnt: 12, '((T([12, 14, 3], th.int32),), {\'device\': "th.device(\'cuda\')", \'dtype\': th.int64})'
Operator: aten._unsafe_view.default
cnt: 24, '((T([1, 12, 16, 64, 64], th.float16), [192, 64, 64]), {})'
cnt: 24, '((T([1, 12, 12, 64, 64], th.float16), [144, 64, 64]), {})'
cnt: 24, '((T([1, 12, 12, 192, 64], th.float16), [144, 192, 64]), {})'
cnt: 24, '((T([1, 1024, 12, 64], th.float16), [1, 1024, 768]), {})'
Operator: aten.add.Tensor
cnt: 76, '((T([1, 1024, 768], th.float16), T([1, 1024, 768], th.float16)), {})'
cnt: 24, '((T([504], th.int64), T([504], th.int64)), {})'
cnt: 36, '((T([1, 1024, 3072], th.float16), T([1, 1024, 3072], th.float16)), {})'
cnt: 12, '((T([1, 1024, 3072], th.float16), 1.0), {})'
cnt: 1, '((T([1, 1024, 768], th.float16), 1.0), {})'
cnt: 360, '((T([1, 12, 16, 64, 64], th.float16), T([1, 12, 16, 64, 64], th.float16)), {})'
cnt: 36, '((T([1, 12, 12, 64, 512], th.float16), T([1, 12, 12, 64, 512], th.float16)), {})'
cnt: 48, '((T([1, 12, 14, 192, 64], th.float16), T([1, 12, 14, 192, 64], th.float16)), {})'
cnt: 36, '((T([1, 12, 12, 64, 64], th.float16), T([1, 12, 12, 64, 64], th.float16)), {})'
cnt: 24, '((T([1, 12, 1024, 64], th.float16), T([1, 12, 1024, 64], th.float16)), {})'
cnt: 12, '((T([1, 12, 1024, 64], th.float16, (786432, 65536, 1, 1024)), T([1, 12, 1024, 64], th.float16, (786432, 65536, 1, 1024))), {})'
cnt: 12, '((T([1, 12, 1024, 64], th.float16, (786432, 65536, 1, 1024)), T([1, 12, 1024, 64], th.float16)), {})'
cnt: 1, '((T([50358, 768], th.float16), T([50358, 768], th.float16)), {})'
Operator: aten.add_.Tensor
cnt: 1, '((T([1, 1024, 768], th.float16), T([1, 1024, 768], th.float16)), {})'
cnt: 24, '((T([1, 12, 64, 1024], th.float16), T([1, 1, 1, 1024], th.float16)), {})'
cnt: 24, '((T([1, 12, 64, 448], th.float16), T([1, 12, 64, 448], th.float32)), {})'
cnt: 12, '((T([1, 12, 12, 64, 192], th.float16), T([1, 1, 12, 64, 192], th.float16)), {})'
cnt: 24, '((T([1, 12, 12, 64, 64], th.float16), T([1, 1, 1, 1, 64], th.float16)), {})'
cnt: 12, '((T([1, 12, 12, 64, 192], th.float16), T([1, 12, 12, 64, 192], th.float32)), {})'
cnt: 36, '((T([1, 12, 12, 64, 64], th.float16), T([1, 12, 12, 64, 64], th.float16)), {})'
Operator: aten.addmm.default
cnt: 49, '((T([768], th.float16), T([1024, 768], th.float16), T([768, 768], th.float16, (1, 768))), {})'
cnt: 12, '((T([3072], th.float16), T([1024, 768], th.float16), T([768, 3072], th.float16, (1, 768))), {})'
cnt: 12, '((T([768], th.float16), T([1024, 3072], th.float16), T([3072, 768], th.float16, (1, 3072))), {})'
cnt: 1, '((T([768], th.float16), T([1, 768], th.float16), T([768, 768], th.float16, (1, 768))), {})'
cnt: 1, '((T([50358], th.float16), T([1024, 768], th.float16), T([768, 50358], th.float16, (1, 768))), {})'
Operator: aten.bmm.default
cnt: 48, '((T([12, 64, 64], th.float16, (64, 768, 1)), T([12, 64, 1024], th.float16, (64, 1, 768))), {})'
cnt: 48, '((T([12, 64, 1024], th.float16), T([12, 1024, 64], th.float16, (64, 768, 1))), {})'
cnt: 48, '((T([12, 64, 64], th.float16, (64, 768, 1)), T([12, 64, 448], th.float16, (28672, 1, 64))), {})'
cnt: 48, '((T([12, 64, 448], th.float16), T([12, 448, 64], th.float16)), {})'
cnt: 48, '((T([144, 64, 64], th.float16), T([144, 64, 192], th.float16, (12288, 1, 64))), {})'
cnt: 24, '((T([12, 768, 64], th.float16, (64, 768, 1)), T([12, 64, 64], th.float16, (64, 1, 768))), {})'
cnt: 24, '((T([144, 64, 192], th.float16, (32768, 512, 1)), T([144, 192, 64], th.float16)), {})'
cnt: 24, '((T([12, 768, 64], th.float16, (393216, 512, 1)), T([12, 64, 64], th.float16, (64, 768, 1))), {})'
cnt: 24, '((T([12, 1024, 64], th.float16, (65536, 1, 1024)), T([12, 64, 64], th.float16, (64, 768, 1))), {})'
cnt: 24, '((T([12, 64, 64], th.float16, (64, 1, 768)), T([12, 64, 1024], th.float16)), {})'
cnt: 24, '((T([12, 448, 64], th.float16, (28672, 1, 448)), T([12, 64, 64], th.float16, (64, 768, 1))), {})'
cnt: 24, '((T([12, 64, 64], th.float16, (64, 1, 768)), T([12, 64, 448], th.float16)), {})'
cnt: 24, '((T([12, 64, 768], th.float16, (393216, 1, 512)), T([12, 768, 64], th.float16)), {})'
cnt: 24, '((T([12, 768, 64], th.float16), T([12, 64, 64], th.float16, (64, 1, 768))), {})'
cnt: 24, '((T([144, 192, 64], th.float16, (32768, 1, 512)), T([144, 64, 64], th.float16)), {})'
cnt: 24, '((T([12, 64, 768], th.float16, (64, 1, 768)), T([12, 768, 64], th.float16)), {})'
cnt: 24, '((T([12, 768, 64], th.float16), T([12, 64, 64], th.float16, (64, 768, 1))), {})'
cnt: 24, '((T([144, 64, 64], th.float16, (4096, 1, 64)), T([144, 64, 192], th.float16)), {})'
cnt: 24, '((T([144, 64, 192], th.float16), T([144, 192, 64], th.float16)), {})'
Operator: aten.cat.default
cnt: 1, '(([T([1, 12, 64], th.float32), T([1, 12, 64], th.float32), T([1, 12, 64], th.float32)], 2), {})'
cnt: 12, '(([T([1, 12, 14, 3], th.int64)],), {})'
cnt: 48, '(([T([1, 12, 64, 64], th.float16, (768, 64, 768, 1)), T([1, 12, 64, 64], th.float16, (768, 64, 768, 1)), T([1, 12, 64, 64], th.float16, (768, 64, 768, 1)), T([1, 12, 64, 64], th.float16, (768, 64, 768, 1)), T([1, 12, 192, 64], th.float16, (2064384, 172032, 64, 1))], 2), {})'
cnt: 12, '(([T([1, 1, 1, 192], th.float16), T([1, 1, 1, 64], th.float16), T([1, 1, 1, 192], th.float16)], 3), {})'
cnt: 24, '(([T([1, 12, 64, 256], th.float32), T([1, 12, 64, 192], th.float32, (2064384, 172032, 192, 1))], 3), {})'
cnt: 24, '(([T([1, 12, 12, 64, 64], th.float16, (768, 64, 49152, 768, 1)), T([1, 12, 12, 64, 64], th.float16, (768, 64, 49152, 768, 1)), T([1, 12, 12, 64, 64], th.float16, (768, 64, 49152, 768, 1))], 3), {})'
cnt: 12, '(([T([1, 12, 12, 64, 64], th.float16), T([1, 12, 12, 64, 192], th.float16), T([1, 12, 12, 64, 192], th.float16), T([1, 12, 12, 64, 64], th.float16)], -1), {})'
cnt: 12, '(([T([1, 1, 1, 64], th.float16), T([1, 1, 1, 192], th.float16), T([1, 1, 1, 192], th.float16)], 3), {})'
cnt: 12, '(([T([1, 12, 1, 64, 64], th.float16), T([1, 12, 1, 64, 64], th.float16), T([1, 12, 12, 64, 64], th.float16), T([1, 12, 1, 64, 64], th.float16), T([1, 12, 1, 64, 64], th.float16)], 2), {})'
Operator: aten.clone.default
cnt: 2, '((T([1, 1024], th.int64),), {})'
Operator: aten.copy_.default
cnt: 2, '((T([1, 1024], th.int64), T([1, 1024], th.int64)), {})'
cnt: 12, '((T([12, 12, 64, 64], th.float16), T([12, 12, 64, 64], th.float16, (64, 49152, 768, 1))), {})'
cnt: 36, '((T([144, 64, 64], th.float16), T([144, 64, 64], th.float16)), {})'
cnt: 36, '((T([1, 12, 12, 64, 64], th.float16), T([1, 12, 12, 64, 64], th.float16)), {})'
Operator: aten.embedding.default
cnt: 1, '((T([50358, 768], th.float16), T([1, 1024], th.int64), 0), {})'
cnt: 1, '((T([2, 768], th.float16), T([1, 1024], th.int64)), {})'
cnt: 1, '((T([4096, 768], th.float16), T([1, 1024], th.int64)), {})'
Operator: aten.embedding_dense_backward.default
cnt: 1, '((T([1, 1024, 768], th.float16), T([1, 1024], th.int64), 4096, -1, False), {})'
cnt: 1, '((T([1, 1024, 768], th.float16), T([1, 1024], th.int64), 2, -1, False), {})'
cnt: 1, '((T([1, 1024, 768], th.float16), T([1, 1024], th.int64), 50358, 0, False), {})'
Operator: aten.floor_divide.default
cnt: 24, '((T([504], th.int64), 42), {})'
Operator: aten.index.Tensor
cnt: 12, '((T([16, 64], th.float32), [T([504], th.int64)]), {})'
Operator: aten.index_add_.default
cnt: 24, '((T([192, 64, 64], th.float16), 0, T([504], th.int64), T([504, 64, 64], th.float16)), {})'
Operator: aten.index_select.default
cnt: 24, '((T([192, 64, 64], th.float16), 0, T([504], th.int64)), {})'
Operator: aten.minimum.default
cnt: 24, '((T([1, 1, 1, 448], th.float16), T([1, 12, 64, 448], th.float32)), {})'
Operator: aten.mm.default
cnt: 1, '((T([1024, 50358], th.float16), T([50358, 768], th.float16)), {})'
cnt: 1, '((T([50358, 1024], th.float16, (1, 50358)), T([1024, 768], th.float16)), {})'
cnt: 37, '((T([1024, 768], th.float16), T([768, 768], th.float16)), {})'
cnt: 37, '((T([768, 1024], th.float16, (1, 768)), T([1024, 768], th.float16)), {})'
cnt: 12, '((T([1024, 768], th.float16), T([768, 3072], th.float16)), {})'
cnt: 12, '((T([768, 1024], th.float16, (1, 768)), T([1024, 3072], th.float16)), {})'
cnt: 12, '((T([1024, 3072], th.float16), T([3072, 768], th.float16)), {})'
cnt: 12, '((T([3072, 1024], th.float16, (1, 3072)), T([1024, 768], th.float16)), {})'
cnt: 12, '((T([1024, 768], th.float16, (1, 1024)), T([768, 768], th.float16)), {})'
cnt: 12, '((T([768, 1024], th.float16), T([1024, 768], th.float16)), {})'
Operator: aten.mul.Scalar
cnt: 1, '((T([1, 1024, 768], th.float16), 3.0), {})'
cnt: 12, '((T([1, 1024, 3072], th.float16), 3.0), {})'
Operator: aten.mul.Tensor
cnt: 1, '((T([1, 12, 64, 1], th.float32), T([1, 12, 1, 192], th.float32)), {})'
cnt: 12, '((T([1, 1, 14, 64, 1], th.float32), T([1, 12, 14, 1, 192], th.float32)), {})'
cnt: 24, '((T([504], th.int64), 16), {})'
cnt: 48, '((T([1, 12, 64, 1024], th.float16), 0.125), {})'
cnt: 24, '((T([1, 1, 1, 1024], th.float16), -10000.0), {})'
cnt: 48, '((T([1, 12, 64, 448], th.float16), 0.125), {})'
cnt: 24, '((T([1, 12, 64, 448], th.float32), -10000.0), {})'
cnt: 24, '((T([1, 12, 12, 64, 192], th.float16), 0.125), {})'
cnt: 24, '((T([1, 12, 12, 64, 64], th.float16), 0.125), {})'
cnt: 12, '((T([1, 1, 12, 64, 192], th.float16), -10000.0), {})'
cnt: 24, '((T([1, 1, 1, 1, 64], th.float16), -10000.0), {})'
cnt: 12, '((T([1, 12, 12, 64, 192], th.float32), -10000.0), {})'
cnt: 12, '((T([1, 12, 1024, 64], th.float16), T([1, 1, 1024, 1], th.float16)), {})'
cnt: 24, '((T([1, 1024, 3072], th.float16), 0.5), {})'
cnt: 24, '((T([1, 1024, 3072], th.float16), 0.044715), {})'
cnt: 24, '((T([1, 1024, 3072], th.float16), 0.7978845608028654), {})'
cnt: 48, '((T([1, 1024, 3072], th.float16), T([1, 1024, 3072], th.float16)), {})'
cnt: 2, '((T([1, 1024, 768], th.float16), 0.5), {})'
cnt: 2, '((T([1, 1024, 768], th.float16), 0.044715), {})'
cnt: 2, '((T([1, 1024, 768], th.float16), 0.7978845608028654), {})'
cnt: 4, '((T([1, 1024, 768], th.float16), T([1, 1024, 768], th.float16)), {})'
cnt: 12, '((T([1, 12, 1024, 64], th.float16, (786432, 64, 768, 1)), T([1, 1, 1024, 1], th.float16)), {})'
cnt: 24, '((T([1, 12, 12, 64, 64], th.float16, (4718592, 393216, 32768, 512, 1)), 0.125), {})'
cnt: 24, '((T([1, 12, 12, 64, 192], th.float16, (4718592, 393216, 32768, 512, 1)), 0.125), {})'
Operator: aten.native_layer_norm.default
cnt: 26, '((T([1, 1024, 768], th.float16), [768], T([768], th.float16), T([768], th.float16), 1e-12), {})'
Operator: aten.native_layer_norm_backward.default
cnt: 26, '((T([1, 1024, 768], th.float16), T([1, 1024, 768], th.float16), [768], T([1, 1024, 1], th.float32), T([1, 1024, 1], th.float32), T([768], th.float16), T([768], th.float16), [True, True, True]), {})'
Operator: aten.new_empty_strided.default
cnt: 36, '((T([144, 64, 64], th.float16), [144, 64, 64], [4096, 64, 1]), {})'
Operator: aten.new_ones.default
cnt: 24, '((T([1, 1, 1, 1024], th.float16), [1, 1, 1, 192]), {\'device\': "th.device(\'cuda\')", \'dtype\': th.float16, \'layout\': th.strided, \'pin_memory\': False})'
cnt: 24, '((T([1, 12, 14, 64, 192], th.float32), [1, 12, 64, 256]), {\'device\': "th.device(\'cuda\')", \'dtype\': th.float32, \'layout\': th.strided, \'pin_memory\': False})'
Operator: aten.new_zeros.default
cnt: 12, '((T([12, 12, 64, 64], th.float16, (64, 49152, 768, 1)), [589824]), {})'
cnt: 24, '((T([504, 64, 64], th.float16), [192, 64, 64]), {\'device\': "th.device(\'cuda\')", \'dtype\': th.float16, \'layout\': th.strided})'
Operator: aten.nll_loss_backward.default
cnt: 1, '((T([], th.float16), T([1024, 50358], th.float16), T([1024], th.int64), None, 1, -100, T([], th.float16)), {})'
Operator: aten.nll_loss_forward.default
cnt: 1, '((T([1024, 50358], th.float16), T([1024], th.int64), None, 1, -100), {})'
Operator: aten.pow.Tensor_Scalar
cnt: 12, '((T([1, 1024, 3072], th.float16), 3.0), {})'
cnt: 1, '((T([1, 1024, 768], th.float16), 3.0), {})'
cnt: 1, '((T([1, 1024, 768], th.float16), 2.0), {})'
cnt: 12, '((T([1, 1024, 3072], th.float16), 2.0), {})'
Operator: aten.rsub.Scalar
cnt: 24, '((T([1, 1, 1, 1024], th.float16), 1.0), {})'
cnt: 24, '((T([1, 12, 64, 448], th.float32), 1.0), {})'
cnt: 12, '((T([1, 1, 12, 64, 192], th.float16), 1.0), {})'
cnt: 24, '((T([1, 1, 1, 1, 64], th.float16), 1.0), {})'
cnt: 12, '((T([1, 12, 12, 64, 192], th.float32, (2064384, 172032, 12288, 192, 1)), 1.0), {})'
Operator: aten.select_backward.default
cnt: 24, '((T([1, 12, 64, 64], th.float16), [1, 12, 16, 64, 64], 2, -1), {})'
cnt: 12, '((T([1, 12, 64, 64], th.float16), [1, 12, 16, 64, 64], 2, -2), {})'
cnt: 12, '((T([1, 12, 192, 64], th.float16, (344064, 28672, 64, 1)), [1, 12, 14, 192, 64], 2, -1), {})'
cnt: 24, '((T([1, 12, 64, 64], th.float16, (344064, 28672, 64, 1)), [1, 12, 16, 64, 64], 2, -1), {})'
cnt: 12, '((T([1, 12, 64, 64], th.float16, (344064, 28672, 64, 1)), [1, 12, 16, 64, 64], 2, -2), {})'
cnt: 12, '((T([1, 12, 64, 64], th.float16, (344064, 28672, 64, 1)), [1, 12, 16, 64, 64], 2, -3), {})'
cnt: 24, '((T([1, 12, 64, 64], th.float16, (344064, 28672, 64, 1)), [1, 12, 16, 64, 64], 2, 0), {})'
cnt: 12, '((T([1, 12, 192, 64], th.float16, (344064, 28672, 1, 448)), [1, 12, 14, 192, 64], 2, -1), {})'
cnt: 24, '((T([1, 12, 64, 64], th.float16, (344064, 28672, 1, 448)), [1, 12, 16, 64, 64], 2, -1), {})'
cnt: 12, '((T([1, 12, 64, 64], th.float16, (344064, 28672, 1, 448)), [1, 12, 16, 64, 64], 2, -2), {})'
cnt: 12, '((T([1, 12, 64, 64], th.float16, (344064, 28672, 1, 448)), [1, 12, 16, 64, 64], 2, -3), {})'
cnt: 24, '((T([1, 12, 64, 64], th.float16, (344064, 28672, 1, 448)), [1, 12, 16, 64, 64], 2, 0), {})'
cnt: 24, '((T([1, 12, 64, 64], th.float16), [1, 12, 16, 64, 64], 2, 0), {})'
cnt: 12, '((T([1, 12, 64, 64], th.float16, (64, 4096, 1, 64)), [1, 12, 16, 64, 64], 2, -1), {})'
cnt: 12, '((T([1, 12, 64, 64], th.float16, (64, 4096, 1, 64)), [1, 12, 16, 64, 64], 2, 0), {})'
cnt: 12, '((T([1, 12, 64, 64], th.float16), [1, 12, 16, 64, 64], 2, 1), {})'
cnt: 12, '((T([1, 12, 192, 64], th.float16, (344064, 28672, 64, 1)), [1, 12, 14, 192, 64], 2, 0), {})'
cnt: 12, '((T([1, 12, 64, 64], th.float16, (344064, 28672, 64, 1)), [1, 12, 16, 64, 64], 2, 2), {})'
cnt: 12, '((T([1, 12, 64, 64], th.float16, (344064, 28672, 64, 1)), [1, 12, 16, 64, 64], 2, 1), {})'
cnt: 12, '((T([1, 12, 192, 64], th.float16, (344064, 28672, 1, 448)), [1, 12, 14, 192, 64], 2, 0), {})'
cnt: 12, '((T([1, 12, 64, 64], th.float16, (344064, 28672, 1, 448)), [1, 12, 16, 64, 64], 2, 2), {})'
cnt: 12, '((T([1, 12, 64, 64], th.float16, (344064, 28672, 1, 448)), [1, 12, 16, 64, 64], 2, 1), {})'
Operator: aten.slice_backward.default
cnt: 372, '((T([1, 12, 16, 64, 64], th.float16), [1, 12, 16, 64, 64], 1, 0, 9223372036854775807, 1), {})'
cnt: 372, '((T([1, 12, 16, 64, 64], th.float16), [1, 12, 16, 64, 64], 0, 0, 9223372036854775807, 1), {})'
cnt: 72, '((T([1, 12, 14, 192, 64], th.float16), [1, 12, 14, 192, 64], 1, 0, 9223372036854775807, 1), {})'
cnt: 72, '((T([1, 12, 14, 192, 64], th.float16), [1, 12, 14, 192, 64], 0, 0, 9223372036854775807, 1), {})'
cnt: 12, '((T([1, 12, 12, 64, 64], th.float16), [1, 12, 12, 64, 512], 4, -64, 9223372036854775807, 1), {})'
cnt: 48, '((T([1, 12, 12, 64, 512], th.float16), [1, 12, 12, 64, 512], 3, 0, 9223372036854775807, 1), {})'
cnt: 48, '((T([1, 12, 12, 64, 512], th.float16), [1, 12, 12, 64, 512], 2, 0, 9223372036854775807, 1), {})'
cnt: 48, '((T([1, 12, 12, 64, 512], th.float16), [1, 12, 12, 64, 512], 1, 0, 9223372036854775807, 1), {})'
cnt: 48, '((T([1, 12, 12, 64, 512], th.float16), [1, 12, 12, 64, 512], 0, 0, 9223372036854775807, 1), {})'
cnt: 12, '((T([1, 12, 12, 64, 64], th.float16), [1, 12, 12, 64, 512], 4, 0, 64, 1), {})'
cnt: 12, '((T([1, 12, 12, 192, 64], th.float16), [1, 12, 14, 192, 64], 2, 1, -1, 1), {})'
cnt: 12, '((T([1, 12, 12, 64, 192], th.float16), [1, 12, 12, 64, 512], 4, 256, -64, 1), {})'
cnt: 12, '((T([1, 12, 12, 64, 192], th.float16), [1, 12, 12, 64, 512], 4, 64, 256, 1), {})'
cnt: 12, '((T([1, 12, 12, 192, 64], th.float16, (1769472, 147456, 12288, 1, 192)), [1, 12, 14, 192, 64], 2, 1, -1, 1), {})'
cnt: 12, '((T([1, 12, 12, 64, 64], th.float16), [1, 12, 16, 64, 64], 2, 2, -2, 1), {})'
cnt: 12, '((T([1, 12, 12, 64, 64], th.float16, (1769472, 147456, 12288, 64, 1)), [1, 12, 16, 64, 64], 2, 3, -1, 1), {})'
cnt: 12, '((T([1, 12, 12, 64, 64], th.float16, (1769472, 147456, 12288, 64, 1)), [1, 12, 16, 64, 64], 2, 2, -2, 1), {})'
cnt: 12, '((T([1, 12, 12, 64, 64], th.float16, (1769472, 147456, 12288, 64, 1)), [1, 12, 16, 64, 64], 2, 1, -3, 1), {})'
cnt: 12, '((T([1, 12, 12, 64, 64], th.float16, (1769472, 147456, 12288, 1, 192)), [1, 12, 16, 64, 64], 2, 3, -1, 1), {})'
cnt: 12, '((T([1, 12, 12, 64, 64], th.float16, (1769472, 147456, 12288, 1, 192)), [1, 12, 16, 64, 64], 2, 2, -2, 1), {})'
cnt: 12, '((T([1, 12, 12, 64, 64], th.float16, (1769472, 147456, 12288, 1, 192)), [1, 12, 16, 64, 64], 2, 1, -3, 1), {})'
Operator: aten.stack.default
cnt: 12, '(([T([504, 64], th.float32)],), {})'
Operator: aten.sum.SymInt
cnt: 1, '((T([1024, 50358], th.float16), [0], True), {})'
cnt: 49, '((T([1024, 768], th.float16), [0], True), {})'
cnt: 12, '((T([1024, 3072], th.float16), [0], True), {})'
cnt: 12, '((T([1024, 768], th.float16, (1, 1024)), [0], True), {})'
Operator: aten.tanh.default
cnt: 12, '((T([1, 1024, 3072], th.float16),), {})'
cnt: 1, '((T([1, 768], th.float16),), {})'
cnt: 1, '((T([1, 1024, 768], th.float16),), {})'
Operator: aten.tanh_backward.default
cnt: 1, '((T([1, 1024, 768], th.float16), T([1, 1024, 768], th.float16)), {})'
cnt: 12, '((T([1, 1024, 3072], th.float16), T([1, 1024, 3072], th.float16)), {})'
Operator: aten.unbind.int
cnt: 12, '((T([1, 16, 64], th.float32),), {})'
cnt: 12, '((T([1, 12, 14, 3], th.int64),), {})'
Operator: aten.unsqueeze_.default
cnt: 1, '((T([1, 12, 64, 192], th.float32), 1), {})'
cnt: 12, '((T([12, 14, 3], th.int64), 0), {})'
cnt: 48, '((T([1, 12, 64, 64], th.float16), 2), {})'
