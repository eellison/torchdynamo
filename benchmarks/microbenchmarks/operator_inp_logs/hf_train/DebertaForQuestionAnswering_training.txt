Operator: aten._log_softmax.default
cnt: 2, '((T([16, 512], th.float16), 1, False), {})'
Operator: aten._log_softmax_backward_data.default
cnt: 2, '((T([16, 512], th.float16), T([16, 512], th.float16), 1, th.float16), {})'
Operator: aten._softmax.default
cnt: 12, '((T([16, 12, 512, 512], th.float16), -1, False), {})'
Operator: aten._softmax_backward_data.default
cnt: 12, '((T([16, 12, 512, 512], th.float16), T([16, 12, 512, 512], th.float16), -1, th.float16), {})'
Operator: aten._to_copy.default
cnt: 25, "((T([16, 512, 768], th.float16),), {'dtype': th.float32})"
cnt: 25, "((T([16, 512, 768], th.float32),), {'dtype': th.float16})"
cnt: 1, "((T([16, 512, 1], th.float32),), {'dtype': th.float16})"
cnt: 1, "((T([16, 1, 512, 512], th.float32),), {'dtype': th.uint8})"
cnt: 12, "((T([16, 1, 512, 512], th.uint8),), {'dtype': th.bool})"
cnt: 25, '((T([16, 512, 768], th.float16),), {\'device\': "th.device(\'cuda\')", \'dtype\': th.float32, \'layout\': th.strided})'
cnt: 25, '((T([16, 512, 768], th.float32),), {\'device\': "th.device(\'cuda\')", \'dtype\': th.float16, \'layout\': th.strided})'
Operator: aten._unsafe_view.default
cnt: 12, '((T([8192, 2304], th.float16), [16, 512, 2304]), {})'
cnt: 36, '((T([16, 12, 512, 64], th.float16), [192, 512, 64]), {})'
cnt: 12, '((T([16, 12, 64, 512], th.float16), [192, 64, 512]), {})'
cnt: 12, '((T([192, 512, 512], th.float16), [16, 12, 512, 512]), {})'
cnt: 12, '((T([192, 512, 64], th.float16), [16, 12, 512, 64]), {})'
cnt: 12, '((T([16, 512, 12, 192], th.float16), [16, 512, 2304]), {})'
Operator: aten.add.Tensor
cnt: 25, '((T([16, 512, 1], th.float32), 1e-07), {})'
cnt: 25, '((T([16, 512, 768], th.float16), T([768], th.float16)), {})'
cnt: 24, '((T([16, 12, 512, 64], th.float16, (1179648, 192, 2304, 1)), T([1, 12, 1, 64], th.float16)), {})'
cnt: 48, '((T([16, 512, 768], th.float16), T([16, 512, 768], th.float16)), {})'
cnt: 1, '((T([], th.float16), T([], th.float16)), {})'
cnt: 50, '((T([16, 512, 768], th.float32), T([16, 512, 768], th.float32)), {})'
cnt: 25, '((T([16, 512, 1], th.float32), T([16, 512, 1], th.float32)), {})'
Operator: aten.add_.Tensor
cnt: 1, '((T([16, 512, 768], th.float16), T([1, 512, 768], th.float16)), {})'
Operator: aten.addmm.default
cnt: 12, '((T([768], th.float16), T([8192, 768], th.float16), T([768, 768], th.float16, (1, 768))), {})'
cnt: 12, '((T([3072], th.float16), T([8192, 768], th.float16), T([768, 3072], th.float16, (1, 768))), {})'
cnt: 12, '((T([768], th.float16), T([8192, 3072], th.float16), T([3072, 768], th.float16, (1, 3072))), {})'
cnt: 1, '((T([2], th.float16), T([8192, 768], th.float16), T([768, 2], th.float16, (1, 768))), {})'
Operator: aten.bitwise_not.default
cnt: 12, '((T([16, 1, 512, 512], th.bool),), {})'
Operator: aten.bmm.default
cnt: 12, '((T([192, 512, 64], th.float16), T([192, 64, 512], th.float16)), {})'
cnt: 12, '((T([192, 512, 512], th.float16), T([192, 512, 64], th.float16)), {})'
cnt: 12, '((T([192, 512, 512], th.float16, (262144, 1, 512)), T([192, 512, 64], th.float16)), {})'
cnt: 12, '((T([192, 512, 64], th.float16), T([192, 64, 512], th.float16, (32768, 1, 64))), {})'
cnt: 12, '((T([192, 64, 512], th.float16, (32768, 1, 64)), T([192, 512, 512], th.float16)), {})'
cnt: 12, '((T([192, 512, 512], th.float16), T([192, 512, 64], th.float16, (32768, 1, 512))), {})'
Operator: aten.cat.default
cnt: 1, '(([T([16, 512, 1], th.float16), T([16, 512, 1], th.float16)], 2), {})'
cnt: 12, '(([T([16, 12, 512, 64], th.float16), T([16, 12, 512, 64], th.float16, (393216, 32768, 1, 512)), T([16, 12, 512, 64], th.float16)], 3), {})'
Operator: aten.clamp.default
cnt: 2, '((T([16], th.int64), 0, 512), {})'
Operator: aten.clone.default
cnt: 2, '((T([16], th.int64),), {})'
cnt: 1, '((T([16, 512], th.int64),), {})'
Operator: aten.copy_.default
cnt: 2, '((T([16], th.int64), T([16], th.int64)), {})'
cnt: 1, '((T([16, 512], th.int64), T([16, 512], th.int64)), {})'
Operator: aten.div.Scalar
cnt: 50, '((T([16, 512, 768], th.float32, (512, 1, 0)), 768), {})'
Operator: aten.div.Tensor
cnt: 100, '((T([16, 512, 768], th.float32), T([16, 512, 1], th.float32)), {})'
cnt: 12, '((T([16, 12, 512, 64], th.float16, (393216, 64, 768, 1)), 8.0), {})'
cnt: 2, '((T([], th.float16), 2), {})'
cnt: 25, '((T([16, 512, 1], th.float32), T([16, 512, 1], th.float32)), {})'
cnt: 12, '((T([16, 12, 512, 64], th.float16), 8.0), {})'
Operator: aten.embedding.default
cnt: 1, '((T([50265, 768], th.float16), T([16, 512], th.int64), 0), {})'
cnt: 1, '((T([512, 768], th.float16), T([1, 512], th.int64)), {})'
Operator: aten.embedding_dense_backward.default
cnt: 1, '((T([1, 512, 768], th.float16), T([1, 512], th.int64), 512, -1, False), {})'
cnt: 1, '((T([16, 512, 768], th.float16), T([16, 512], th.int64), 50265, 0, False), {})'
Operator: aten.gelu.default
cnt: 12, '((T([16, 512, 3072], th.float16),), {})'
Operator: aten.gelu_backward.default
cnt: 12, '((T([16, 512, 3072], th.float16), T([16, 512, 3072], th.float16)), {})'
Operator: aten.masked_fill.Tensor
cnt: 12, '((T([16, 12, 512, 512], th.float16), T([16, 1, 512, 512], th.bool), T([], th.float32)), {})'
Operator: aten.masked_fill_.Scalar
cnt: 12, '((T([16, 12, 512, 512], th.float16), T([16, 1, 512, 512], th.bool), 0), {})'
Operator: aten.mean.dim
cnt: 50, '((T([16, 512, 768], th.float32), [-1], True), {})'
Operator: aten.mm.default
cnt: 12, '((T([8192, 768], th.float16), T([768, 2304], th.float16, (1, 768))), {})'
cnt: 1, '((T([8192, 2], th.float16), T([2, 768], th.float16)), {})'
cnt: 1, '((T([2, 8192], th.float16, (1, 2)), T([8192, 768], th.float16)), {})'
cnt: 12, '((T([8192, 768], th.float16), T([768, 3072], th.float16)), {})'
cnt: 12, '((T([768, 8192], th.float16, (1, 768)), T([8192, 3072], th.float16)), {})'
cnt: 12, '((T([8192, 3072], th.float16), T([3072, 768], th.float16)), {})'
cnt: 12, '((T([3072, 8192], th.float16, (1, 3072)), T([8192, 768], th.float16)), {})'
cnt: 12, '((T([8192, 768], th.float16), T([768, 768], th.float16)), {})'
cnt: 12, '((T([768, 8192], th.float16, (1, 768)), T([8192, 768], th.float16)), {})'
cnt: 12, '((T([2304, 8192], th.float16, (1, 2304)), T([8192, 768], th.float16)), {})'
cnt: 12, '((T([8192, 2304], th.float16), T([2304, 768], th.float16)), {})'
Operator: aten.mul.Scalar
cnt: 25, '((T([16, 512, 1], th.float32), 2), {})'
cnt: 25, '((T([16, 512, 768], th.float32), 2.0), {})'
Operator: aten.mul.Tensor
cnt: 25, '((T([768], th.float16), T([16, 512, 768], th.float16)), {})'
cnt: 2, '((T([16, 512, 768], th.float16), T([16, 512, 1], th.float16)), {})'
cnt: 1, '((T([16, 1, 1, 512], th.float32), T([16, 1, 512, 1], th.float32)), {})'
cnt: 25, '((T([16, 512, 768], th.float16), T([768], th.float16)), {})'
cnt: 25, '((T([16, 512, 768], th.float16), T([16, 512, 768], th.float16)), {})'
cnt: 50, '((T([16, 512, 768], th.float32), T([16, 512, 768], th.float32)), {})'
Operator: aten.neg.default
cnt: 75, '((T([16, 512, 768], th.float32),), {})'
Operator: aten.nll_loss_backward.default
cnt: 2, '((T([], th.float16), T([16, 512], th.float16), T([16], th.int64), None, 1, 512, T([], th.float16)), {})'
Operator: aten.nll_loss_forward.default
cnt: 2, '((T([16, 512], th.float16), T([16], th.int64), None, 1, 512), {})'
Operator: aten.pow.Tensor_Scalar
cnt: 25, '((T([16, 512, 768], th.float32), 2), {})'
cnt: 25, '((T([16, 512, 768], th.float32), 1.0), {})'
Operator: aten.slice_backward.default
cnt: 24, '((T([1, 1, 768], th.float16), [1, 1, 768], 2, 0, 9223372036854775807, 1), {})'
Operator: aten.split.Tensor
cnt: 12, '((T([16, 12, 512, 192], th.float16, (1179648, 192, 2304, 1)), 64, -1), {})'
cnt: 1, '((T([16, 512, 2], th.float16), 1, -1), {})'
Operator: aten.sqrt.default
cnt: 25, '((T([16, 512, 1], th.float32),), {})'
Operator: aten.sub.Tensor
cnt: 50, '((T([16, 512, 768], th.float32), T([16, 512, 1], th.float32)), {})'
Operator: aten.sum.SymInt
cnt: 1, '((T([8192, 2], th.float16), [0], True), {})'
cnt: 50, '((T([16, 512, 768], th.float16), [0, 1], True), {})'
cnt: 75, '((T([16, 512, 768], th.float32), [2], True), {})'
cnt: 24, '((T([8192, 768], th.float16), [0], True), {})'
cnt: 12, '((T([8192, 3072], th.float16), [0], True), {})'
cnt: 24, '((T([16, 12, 512, 64], th.float16), [0, 2], True), {})'
cnt: 1, '((T([16, 512, 768], th.float16), [0], True), {})'
