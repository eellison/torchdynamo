Operator: aten._log_softmax.default
cnt: 1, '((T([8128, 30522], th.float16), 1, False), {})'
Operator: aten._log_softmax_backward_data.default
cnt: 1, '((T([8128, 30522], th.float16), T([8128, 30522], th.float16), 1, th.float16), {})'
Operator: aten._softmax.default
cnt: 12, '((T([64, 12, 128, 128], th.float16), -1, False), {})'
Operator: aten._softmax_backward_data.default
cnt: 12, '((T([64, 12, 128, 128], th.float16), T([64, 12, 128, 128], th.float16), -1, th.float16), {})'
Operator: aten._to_copy.default
cnt: 1, "((T([64, 1, 1, 128], th.float32),), {'dtype': th.float16})"
cnt: 1, "((T([64, 128], th.bool),), {'dtype': th.int32})"
cnt: 1, '((T([64, 128], th.int64),), {\'device\': "th.device(\'cuda\')", \'dtype\': th.int32, \'layout\': th.strided})'
cnt: 1, "((T([64, 128], th.int32),), {'dtype': th.int64})"
Operator: aten._unsafe_view.default
cnt: 36, '((T([64, 12, 128, 64], th.float16), [768, 128, 64]), {})'
cnt: 12, '((T([64, 12, 64, 128], th.float16), [768, 64, 128]), {})'
cnt: 12, '((T([768, 128, 128], th.float16), [64, 12, 128, 128]), {})'
cnt: 12, '((T([768, 128, 64], th.float16), [64, 12, 128, 64]), {})'
cnt: 24, '((T([64, 128, 12, 64], th.float16), [64, 128, 768]), {})'
cnt: 12, '((T([64, 128, 768], th.float16), [8192, 768]), {})'
Operator: aten.add.Tensor
cnt: 1, '((T([64, 128], th.int32), 0), {})'
cnt: 1, '((T([64, 128], th.int64), 0), {})'
cnt: 73, '((T([64, 128, 768], th.float16), T([64, 128, 768], th.float16)), {})'
cnt: 12, '((T([64, 12, 128, 128], th.float16), T([64, 1, 1, 128], th.float16)), {})'
cnt: 1, '((T([30522, 768], th.float16), T([30522, 768], th.float16)), {})'
Operator: aten.add_.Tensor
cnt: 1, '((T([64, 128, 768], th.float16), T([64, 128, 768], th.float16)), {})'
Operator: aten.addmm.default
cnt: 49, '((T([768], th.float16), T([8192, 768], th.float16), T([768, 768], th.float16, (1, 768))), {})'
cnt: 12, '((T([3072], th.float16), T([8192, 768], th.float16), T([768, 3072], th.float16, (1, 768))), {})'
cnt: 12, '((T([768], th.float16), T([8192, 3072], th.float16), T([3072, 768], th.float16, (1, 3072))), {})'
cnt: 1, '((T([30522], th.float16), T([8192, 768], th.float16), T([768, 30522], th.float16, (1, 768))), {})'
Operator: aten.bmm.default
cnt: 12, '((T([768, 128, 64], th.float16), T([768, 64, 128], th.float16)), {})'
cnt: 12, '((T([768, 128, 128], th.float16), T([768, 128, 64], th.float16)), {})'
cnt: 12, '((T([768, 128, 128], th.float16, (16384, 1, 128)), T([768, 128, 64], th.float16)), {})'
cnt: 12, '((T([768, 128, 64], th.float16), T([768, 64, 128], th.float16, (8192, 1, 64))), {})'
cnt: 12, '((T([768, 64, 128], th.float16, (8192, 1, 64)), T([768, 128, 128], th.float16)), {})'
cnt: 12, '((T([768, 128, 128], th.float16), T([768, 128, 64], th.float16, (8192, 1, 128))), {})'
Operator: aten.clone.default
cnt: 2, '((T([64, 128], th.int64),), {})'
Operator: aten.copy_.default
cnt: 2, '((T([64, 128], th.int64), T([64, 128], th.int64)), {})'
Operator: aten.cumsum.default
cnt: 1, '((T([64, 128], th.int32), 1), {})'
Operator: aten.div.Tensor
cnt: 24, '((T([64, 12, 128, 128], th.float16), 8.0), {})'
Operator: aten.embedding.default
cnt: 1, '((T([30522, 768], th.float16), T([64, 128], th.int64), 0), {})'
cnt: 1, '((T([2, 768], th.float16), T([64, 128], th.int64, (0, 1))), {})'
cnt: 1, '((T([512, 768], th.float16), T([64, 128], th.int64), 0), {})'
Operator: aten.embedding_dense_backward.default
cnt: 1, '((T([64, 128, 768], th.float16), T([64, 128], th.int64), 512, 0, False), {})'
cnt: 1, '((T([64, 128, 768], th.float16), T([64, 128], th.int64, (0, 1)), 2, -1, False), {})'
cnt: 1, '((T([64, 128, 768], th.float16), T([64, 128], th.int64), 30522, 0, False), {})'
Operator: aten.gelu.default
cnt: 12, '((T([64, 128, 3072], th.float16),), {})'
cnt: 1, '((T([64, 128, 768], th.float16),), {})'
Operator: aten.gelu_backward.default
cnt: 1, '((T([64, 128, 768], th.float16), T([64, 128, 768], th.float16)), {})'
cnt: 12, '((T([64, 128, 3072], th.float16), T([64, 128, 3072], th.float16)), {})'
Operator: aten.mm.default
cnt: 1, '((T([8192, 30522], th.float16), T([30522, 768], th.float16)), {})'
cnt: 1, '((T([30522, 8192], th.float16, (1, 30522)), T([8192, 768], th.float16)), {})'
cnt: 49, '((T([8192, 768], th.float16), T([768, 768], th.float16)), {})'
cnt: 49, '((T([768, 8192], th.float16, (1, 768)), T([8192, 768], th.float16)), {})'
cnt: 12, '((T([8192, 768], th.float16), T([768, 3072], th.float16)), {})'
cnt: 12, '((T([768, 8192], th.float16, (1, 768)), T([8192, 3072], th.float16)), {})'
cnt: 12, '((T([8192, 3072], th.float16), T([3072, 768], th.float16)), {})'
cnt: 12, '((T([3072, 8192], th.float16, (1, 3072)), T([8192, 768], th.float16)), {})'
Operator: aten.mul.Tensor
cnt: 1, '((T([64, 1, 1, 128], th.float16), -10000.0), {})'
cnt: 1, '((T([64, 128], th.int32), T([64, 128], th.int32)), {})'
Operator: aten.native_layer_norm.default
cnt: 26, '((T([64, 128, 768], th.float16), [768], T([768], th.float16), T([768], th.float16), 1e-12), {})'
Operator: aten.native_layer_norm_backward.default
cnt: 26, '((T([64, 128, 768], th.float16), T([64, 128, 768], th.float16), [768], T([64, 128, 1], th.float32), T([64, 128, 1], th.float32), T([768], th.float16), T([768], th.float16), [True, True, True]), {})'
Operator: aten.ne.Scalar
cnt: 1, '((T([64, 128], th.int64), 0), {})'
Operator: aten.nll_loss_backward.default
cnt: 1, '((T([], th.float16), T([8128, 30522], th.float16), T([8128], th.int64), None, 1, -100, T([], th.float16)), {})'
Operator: aten.nll_loss_forward.default
cnt: 1, '((T([8128, 30522], th.float16), T([8128], th.int64), None, 1, -100), {})'
Operator: aten.rsub.Scalar
cnt: 1, '((T([64, 1, 1, 128], th.float16), 1.0), {})'
Operator: aten.slice_backward.default
cnt: 1, '((T([64, 127, 30522], th.float16), [64, 127, 30522], 2, 0, 9223372036854775807, 1), {})'
cnt: 1, '((T([64, 127, 30522], th.float16), [64, 128, 30522], 1, 0, -1, 1), {})'
cnt: 1, '((T([64, 128, 30522], th.float16), [64, 128, 30522], 0, 0, 9223372036854775807, 1), {})'
Operator: aten.sum.SymInt
cnt: 1, '((T([8192, 30522], th.float16), [0], True), {})'
cnt: 61, '((T([8192, 768], th.float16), [0], True), {})'
cnt: 12, '((T([8192, 3072], th.float16), [0], True), {})'
