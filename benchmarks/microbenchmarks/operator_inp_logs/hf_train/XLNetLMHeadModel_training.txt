Operator: aten._log_softmax.default
cnt: 1, '((T([4096, 32000], th.float16), 1, False), {})'
Operator: aten._log_softmax_backward_data.default
cnt: 1, '((T([4096, 32000], th.float16), T([4096, 32000], th.float16), 1, th.float16), {})'
Operator: aten._softmax.default
cnt: 24, '((T([8, 16, 512, 512], th.float16), 3, False), {})'
Operator: aten._softmax_backward_data.default
cnt: 24, '((T([8, 16, 512, 512], th.float16), T([8, 16, 512, 512], th.float16), 3, th.float16), {})'
Operator: aten._to_copy.default
cnt: 1, '((T([1024, 8, 1024], th.float32, (1024, 0, 1)),), {\'device\': "th.device(\'cuda\')", \'dtype\': th.float32, \'layout\': th.strided})'
cnt: 24, '((T([1024, 8, 1024], th.float32),), {\'device\': "th.device(\'cuda\')", \'dtype\': th.float16})'
Operator: aten._unsafe_view.default
cnt: 24, '((T([512, 8, 64, 16, 1], th.float16), [1, 4096, 1024]), {})'
cnt: 24, '((T([64, 16, 1024, 1, 1], th.float16), [1, 1024, 1024]), {})'
cnt: 24, '((T([8, 16, 512, 1, 64], th.float16), [128, 512, 64]), {})'
cnt: 24, '((T([1024, 8, 1, 16, 64], th.float16), [1, 8192, 1024]), {})'
cnt: 72, '((T([512, 8, 1, 16, 64], th.float16), [1, 4096, 1024]), {})'
Operator: aten.add.Tensor
cnt: 48, '((T([512, 8, 16, 64], th.float16), T([16, 64], th.float16)), {})'
cnt: 24, '((T([8, 16, 512, 512], th.float16), T([8, 16, 512, 512], th.float16)), {})'
cnt: 24, '((T([8, 16, 512, 512], th.float16), 0), {})'
cnt: 144, '((T([512, 8, 1024], th.float16), T([512, 8, 1024], th.float16)), {})'
cnt: 24, '((T([512, 8, 16, 64], th.float16, (64, 524288, 32768, 1)), T([512, 8, 16, 64], th.float16, (64, 524288, 32768, 1))), {})'
cnt: 1, '((T([32000, 1024], th.float16), T([32000, 1024], th.float16)), {})'
Operator: aten.addmm.default
cnt: 24, '((T([4096], th.float16), T([4096, 1024], th.float16), T([1024, 4096], th.float16, (1, 1024))), {})'
cnt: 24, '((T([1024], th.float16), T([4096, 4096], th.float16), T([4096, 1024], th.float16, (1, 4096))), {})'
cnt: 1, '((T([32000], th.float16), T([4096, 1024], th.float16), T([1024, 32000], th.float16, (1, 1024))), {})'
Operator: aten.bmm.default
cnt: 96, '((T([1, 4096, 1024], th.float16), T([1, 1024, 1024], th.float16)), {})'
cnt: 24, '((T([1, 8192, 1024], th.float16), T([1, 1024, 1024], th.float16)), {})'
cnt: 24, '((T([128, 512, 64], th.float16, (64, 8192, 1)), T([128, 64, 512], th.float16, (64, 1, 8192))), {})'
cnt: 24, '((T([128, 512, 64], th.float16, (64, 8192, 1)), T([128, 64, 1024], th.float16, (64, 1, 8192))), {})'
cnt: 48, '((T([128, 512, 512], th.float16), T([128, 512, 64], th.float16, (64, 8192, 1))), {})'
cnt: 96, '((T([1, 1024, 4096], th.float16, (4194304, 1, 1024)), T([1, 4096, 1024], th.float16)), {})'
cnt: 96, '((T([1, 4096, 1024], th.float16), T([1, 1024, 1024], th.float16, (1048576, 1, 1024))), {})'
cnt: 24, '((T([128, 512, 512], th.float16, (262144, 1, 512)), T([128, 512, 64], th.float16)), {})'
cnt: 24, '((T([128, 512, 64], th.float16), T([128, 64, 512], th.float16, (64, 1, 8192))), {})'
cnt: 24, '((T([128, 64, 512], th.float16, (64, 1, 8192)), T([128, 512, 1024], th.float16)), {})'
cnt: 24, '((T([128, 512, 1024], th.float16), T([128, 1024, 64], th.float16, (64, 8192, 1))), {})'
cnt: 24, '((T([128, 64, 512], th.float16, (64, 1, 8192)), T([128, 512, 512], th.float16)), {})'
cnt: 24, '((T([1, 1024, 8192], th.float16, (8388608, 1, 1024)), T([1, 8192, 1024], th.float16)), {})'
Operator: aten.cat.default
cnt: 1, '(([T([1024, 512], th.float32), T([1024, 512], th.float32)], -1), {})'
Operator: aten.clone.default
cnt: 2, '((T([8, 512], th.int64),), {})'
Operator: aten.copy_.default
cnt: 2, '((T([8, 512], th.int64), T([8, 512], th.int64)), {})'
cnt: 24, '((T([1024, 16, 64], th.float16), T([1024, 16, 64], th.float16, (1, 1024, 16384))), {})'
Operator: aten.cos.default
cnt: 1, '((T([1024, 512], th.float32),), {})'
Operator: aten.div.Tensor
cnt: 1, '((T([512], th.float32), 1024), {})'
Operator: aten.embedding.default
cnt: 1, '((T([32000, 1024], th.float16), T([512, 8], th.int64)), {})'
Operator: aten.embedding_dense_backward.default
cnt: 1, '((T([512, 8, 1024], th.float16), T([512, 8], th.int64), 32000, -1, False), {})'
Operator: aten.gelu.default
cnt: 24, '((T([512, 8, 4096], th.float16),), {})'
Operator: aten.gelu_backward.default
cnt: 24, '((T([512, 8, 4096], th.float16), T([512, 8, 4096], th.float16)), {})'
Operator: aten.index_add_.default
cnt: 24, '((T([8, 16, 512, 1023], th.float16), 3, T([512], th.int64), T([8, 16, 512, 512], th.float16)), {})'
Operator: aten.index_select.default
cnt: 24, '((T([8, 16, 512, 1023], th.float16, (8388608, 524288, 1023, 1)), 3, T([512], th.int64)), {})'
Operator: aten.mm.default
cnt: 1, '((T([4096, 32000], th.float16), T([32000, 1024], th.float16)), {})'
cnt: 1, '((T([32000, 4096], th.float16, (1, 32000)), T([4096, 1024], th.float16)), {})'
cnt: 24, '((T([4096, 1024], th.float16), T([1024, 4096], th.float16)), {})'
cnt: 24, '((T([1024, 4096], th.float16, (1, 1024)), T([4096, 4096], th.float16)), {})'
cnt: 24, '((T([4096, 4096], th.float16), T([4096, 1024], th.float16)), {})'
cnt: 24, '((T([4096, 4096], th.float16, (1, 4096)), T([4096, 1024], th.float16)), {})'
Operator: aten.mul.Tensor
cnt: 1, '((T([512], th.float32), 1), {})'
cnt: 1, '((T([1024, 1], th.float32), T([1, 512], th.float32)), {})'
cnt: 48, '((T([8, 16, 512, 512], th.float16), 0.125), {})'
Operator: aten.native_layer_norm.default
cnt: 48, '((T([512, 8, 1024], th.float16), [1024], T([1024], th.float16), T([1024], th.float16), 1e-12), {})'
Operator: aten.native_layer_norm_backward.default
cnt: 1, '((T([512, 8, 1024], th.float16, (1024, 524288, 1)), T([512, 8, 1024], th.float16), [1024], T([512, 8, 1], th.float32), T([512, 8, 1], th.float32), T([1024], th.float16), T([1024], th.float16), [True, True, True]), {})'
cnt: 47, '((T([512, 8, 1024], th.float16), T([512, 8, 1024], th.float16), [1024], T([512, 8, 1], th.float32), T([512, 8, 1], th.float32), T([1024], th.float16), T([1024], th.float16), [True, True, True]), {})'
Operator: aten.new_empty_strided.default
cnt: 24, '((T([1024, 16, 64], th.float16, (1, 1024, 16384)), [1024, 16, 64], [1024, 64, 1]), {\'device\': "th.device(\'cuda\')", \'dtype\': th.float16, \'layout\': th.strided})'
Operator: aten.new_zeros.default
cnt: 24, '((T([8, 16, 512, 512], th.float16), [8, 16, 512, 1023]), {\'device\': "th.device(\'cuda\')", \'dtype\': th.float16, \'layout\': th.strided})'
Operator: aten.nll_loss_backward.default
cnt: 1, '((T([], th.float16), T([4096, 32000], th.float16), T([4096], th.int64), None, 1, -100, T([], th.float16)), {})'
Operator: aten.nll_loss_forward.default
cnt: 1, '((T([4096, 32000], th.float16), T([4096], th.int64), None, 1, -100), {})'
Operator: aten.pow.Scalar
cnt: 1, '((10000, T([512], th.float32)), {})'
Operator: aten.reciprocal.default
cnt: 1, '((T([512], th.float32),), {})'
Operator: aten.sin.default
cnt: 1, '((T([1024, 512], th.float32),), {})'
Operator: aten.slice_backward.default
cnt: 24, '((T([8, 16, 1023, 512], th.float16), [8, 16, 1023, 512], 3, 0, 9223372036854775807, 1), {})'
cnt: 24, '((T([8, 16, 1023, 512], th.float16), [8, 16, 1024, 512], 2, 1, 9223372036854775807, 1), {})'
cnt: 24, '((T([8, 16, 1024, 512], th.float16), [8, 16, 1024, 512], 1, 0, 9223372036854775807, 1), {})'
cnt: 24, '((T([8, 16, 1024, 512], th.float16), [8, 16, 1024, 512], 0, 0, 9223372036854775807, 1), {})'
Operator: aten.sum.SymInt
cnt: 1, '((T([4096, 32000], th.float16), [0], True), {})'
cnt: 24, '((T([4096, 1024], th.float16), [0], True), {})'
cnt: 24, '((T([4096, 4096], th.float16), [0], True), {})'
cnt: 48, '((T([512, 8, 16, 64], th.float16, (64, 524288, 32768, 1)), [0, 1], True), {})'
