Operator: aten._log_softmax.default
cnt: 2, '((T([4, 512], th.float16), 1, False), {})'
Operator: aten._log_softmax_backward_data.default
cnt: 2, '((T([4, 512], th.float16), T([4, 512], th.float16), 1, th.float16), {})'
Operator: aten._softmax.default
cnt: 12, '((T([4, 64, 512, 512], th.float16), -1, False), {})'
Operator: aten._softmax_backward_data.default
cnt: 12, '((T([4, 64, 512, 512], th.float16), T([4, 64, 512, 512], th.float16), -1, th.float16), {})'
Operator: aten._to_copy.default
cnt: 1, "((T([4, 1, 1, 512], th.float32),), {'dtype': th.float16})"
Operator: aten._unsafe_view.default
cnt: 36, '((T([4, 64, 512, 64], th.float16), [256, 512, 64]), {})'
cnt: 12, '((T([4, 64, 64, 512], th.float16), [256, 64, 512]), {})'
cnt: 12, '((T([256, 512, 512], th.float16), [4, 64, 512, 512]), {})'
cnt: 12, '((T([256, 512, 64], th.float16), [4, 64, 512, 64]), {})'
cnt: 36, '((T([4, 512, 64, 64], th.float16), [4, 512, 4096]), {})'
cnt: 12, '((T([4, 512, 4096], th.float16), [2048, 4096]), {})'
Operator: aten.add.Tensor
cnt: 1, '((T([4, 512, 128], th.float16), T([4, 512, 128], th.float16)), {})'
cnt: 12, '((T([4, 64, 512, 512], th.float16), T([4, 1, 1, 512], th.float16)), {})'
cnt: 72, '((T([4, 512, 4096], th.float16), T([4, 512, 4096], th.float16)), {})'
cnt: 36, '((T([4, 512, 16384], th.float16), T([4, 512, 16384], th.float16)), {})'
cnt: 12, '((T([4, 512, 16384], th.float16), 1.0), {})'
cnt: 1, '((T([], th.float16), T([], th.float16)), {})'
cnt: 99, '((T([4096], th.float16), T([4096], th.float16)), {})'
cnt: 11, '((T([4096, 16384], th.float16), T([4096, 16384], th.float16)), {})'
cnt: 11, '((T([16384], th.float16), T([16384], th.float16)), {})'
cnt: 11, '((T([16384, 4096], th.float16), T([16384, 4096], th.float16)), {})'
cnt: 44, '((T([4096, 4096], th.float16), T([4096, 4096], th.float16)), {})'
Operator: aten.add_.Tensor
cnt: 1, '((T([4, 512, 128], th.float16), T([1, 512, 128], th.float16)), {})'
Operator: aten.addmm.default
cnt: 1, '((T([4096], th.float16), T([2048, 128], th.float16), T([128, 4096], th.float16, (1, 128))), {})'
cnt: 48, '((T([4096], th.float16), T([2048, 4096], th.float16), T([4096, 4096], th.float16, (1, 4096))), {})'
cnt: 12, '((T([16384], th.float16), T([2048, 4096], th.float16), T([4096, 16384], th.float16, (1, 4096))), {})'
cnt: 12, '((T([4096], th.float16), T([2048, 16384], th.float16), T([16384, 4096], th.float16, (1, 16384))), {})'
cnt: 1, '((T([2], th.float16), T([2048, 4096], th.float16), T([4096, 2], th.float16, (1, 4096))), {})'
Operator: aten.bmm.default
cnt: 12, '((T([256, 512, 64], th.float16), T([256, 64, 512], th.float16)), {})'
cnt: 12, '((T([256, 512, 512], th.float16), T([256, 512, 64], th.float16)), {})'
cnt: 12, '((T([256, 512, 512], th.float16, (262144, 1, 512)), T([256, 512, 64], th.float16)), {})'
cnt: 12, '((T([256, 512, 64], th.float16), T([256, 64, 512], th.float16, (32768, 1, 64))), {})'
cnt: 12, '((T([256, 64, 512], th.float16, (32768, 1, 64)), T([256, 512, 512], th.float16)), {})'
cnt: 12, '((T([256, 512, 512], th.float16), T([256, 512, 64], th.float16, (32768, 1, 512))), {})'
Operator: aten.cat.default
cnt: 1, '(([T([4, 512, 1], th.float16), T([4, 512, 1], th.float16)], 2), {})'
Operator: aten.clamp.default
cnt: 2, '((T([4], th.int64), 0, 512), {})'
Operator: aten.clone.default
cnt: 2, '((T([4], th.int64),), {})'
cnt: 1, '((T([4, 512], th.int64),), {})'
Operator: aten.copy_.default
cnt: 2, '((T([4], th.int64), T([4], th.int64)), {})'
cnt: 1, '((T([4, 512], th.int64), T([4, 512], th.int64)), {})'
Operator: aten.div.Tensor
cnt: 24, '((T([4, 64, 512, 512], th.float16), 8.0), {})'
cnt: 2, '((T([], th.float16), 2), {})'
Operator: aten.embedding.default
cnt: 1, '((T([30000, 128], th.float16), T([4, 512], th.int64), 0), {})'
cnt: 1, '((T([2, 128], th.float16), T([4, 512], th.int64, (0, 1))), {})'
cnt: 1, '((T([512, 128], th.float16), T([1, 512], th.int64)), {})'
Operator: aten.embedding_dense_backward.default
cnt: 1, '((T([1, 512, 128], th.float16), T([1, 512], th.int64), 512, -1, False), {})'
cnt: 1, '((T([4, 512, 128], th.float16), T([4, 512], th.int64, (0, 1)), 2, -1, False), {})'
cnt: 1, '((T([4, 512, 128], th.float16), T([4, 512], th.int64), 30000, 0, False), {})'
Operator: aten.mm.default
cnt: 1, '((T([2048, 2], th.float16), T([2, 4096], th.float16)), {})'
cnt: 1, '((T([2, 2048], th.float16, (1, 2)), T([2048, 4096], th.float16)), {})'
cnt: 12, '((T([2048, 4096], th.float16), T([4096, 16384], th.float16)), {})'
cnt: 12, '((T([4096, 2048], th.float16, (1, 4096)), T([2048, 16384], th.float16)), {})'
cnt: 12, '((T([2048, 16384], th.float16), T([16384, 4096], th.float16)), {})'
cnt: 12, '((T([16384, 2048], th.float16, (1, 16384)), T([2048, 4096], th.float16)), {})'
cnt: 48, '((T([2048, 4096], th.float16), T([4096, 4096], th.float16)), {})'
cnt: 48, '((T([4096, 2048], th.float16, (1, 4096)), T([2048, 4096], th.float16)), {})'
cnt: 1, '((T([2048, 4096], th.float16), T([4096, 128], th.float16)), {})'
cnt: 1, '((T([4096, 2048], th.float16, (1, 4096)), T([2048, 128], th.float16)), {})'
Operator: aten.mul.Scalar
cnt: 12, '((T([4, 512, 16384], th.float16), 3.0), {})'
Operator: aten.mul.Tensor
cnt: 1, '((T([4, 1, 1, 512], th.float16), -10000.0), {})'
cnt: 24, '((T([4, 512, 16384], th.float16), 0.5), {})'
cnt: 24, '((T([4, 512, 16384], th.float16), 0.044715), {})'
cnt: 24, '((T([4, 512, 16384], th.float16), 0.7978845608028654), {})'
cnt: 48, '((T([4, 512, 16384], th.float16), T([4, 512, 16384], th.float16)), {})'
Operator: aten.native_layer_norm.default
cnt: 1, '((T([4, 512, 128], th.float16), [128], T([128], th.float16), T([128], th.float16), 1e-12), {})'
cnt: 24, '((T([4, 512, 4096], th.float16), [4096], T([4096], th.float16), T([4096], th.float16), 1e-12), {})'
Operator: aten.native_layer_norm_backward.default
cnt: 24, '((T([4, 512, 4096], th.float16), T([4, 512, 4096], th.float16), [4096], T([4, 512, 1], th.float32), T([4, 512, 1], th.float32), T([4096], th.float16), T([4096], th.float16), [True, True, True]), {})'
cnt: 1, '((T([4, 512, 128], th.float16), T([4, 512, 128], th.float16), [128], T([4, 512, 1], th.float32), T([4, 512, 1], th.float32), T([128], th.float16), T([128], th.float16), [True, True, True]), {})'
Operator: aten.nll_loss_backward.default
cnt: 2, '((T([], th.float16), T([4, 512], th.float16), T([4], th.int64), None, 1, 512, T([], th.float16)), {})'
Operator: aten.nll_loss_forward.default
cnt: 2, '((T([4, 512], th.float16), T([4], th.int64), None, 1, 512), {})'
Operator: aten.pow.Tensor_Scalar
cnt: 12, '((T([4, 512, 16384], th.float16), 3.0), {})'
cnt: 12, '((T([4, 512, 16384], th.float16), 2.0), {})'
Operator: aten.rsub.Scalar
cnt: 1, '((T([4, 1, 1, 512], th.float16), 1.0), {})'
Operator: aten.split.Tensor
cnt: 1, '((T([4, 512, 2], th.float16), 1, -1), {})'
Operator: aten.sum.SymInt
cnt: 1, '((T([2048, 2], th.float16), [0], True), {})'
cnt: 61, '((T([2048, 4096], th.float16), [0], True), {})'
cnt: 12, '((T([2048, 16384], th.float16), [0], True), {})'
cnt: 1, '((T([4, 512, 128], th.float16), [0], True), {})'
Operator: aten.tanh.default
cnt: 12, '((T([4, 512, 16384], th.float16),), {})'
Operator: aten.tanh_backward.default
cnt: 12, '((T([4, 512, 16384], th.float16), T([4, 512, 16384], th.float16)), {})'
