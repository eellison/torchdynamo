Operator: aten._log_softmax.default
cnt: 1, '((T([8176, 50272], th.float16), 1, False), {})'
Operator: aten._log_softmax_backward_data.default
cnt: 1, '((T([8176, 50272], th.float16), T([8176, 50272], th.float16), 1, th.float16), {})'
Operator: aten._softmax.default
cnt: 12, '((T([192, 512, 512], th.float16), -1, False), {})'
Operator: aten._softmax_backward_data.default
cnt: 12, '((T([192, 512, 512], th.float16), T([192, 512, 512], th.float16), -1, th.float16), {})'
Operator: aten._to_copy.default
cnt: 1, "((T([16, 512], th.bool),), {'dtype': th.int64})"
cnt: 1, "((T([512, 512], th.float32),), {'dtype': th.float16})"
cnt: 1, '((T([16, 1, 512, 512], th.float16, (0, 262144, 512, 1)),), {\'device\': "th.device(\'cuda\')", \'dtype\': th.float16, \'layout\': th.strided})'
cnt: 1, "((T([16, 1, 512, 512], th.bool, (512, 512, 0, 1)),), {'dtype': th.float16})"
cnt: 1, "((T([16, 1, 512, 512], th.float16),), {'dtype': th.bool})"
Operator: aten._unsafe_view.default
cnt: 36, '((T([16, 512, 12, 64], th.float16), [16, 512, 768]), {})'
cnt: 1, '((T([8192, 50272], th.float16), [16, 512, 50272]), {})'
cnt: 12, '((T([16, 12, 512, 64], th.float16), [192, 512, 64]), {})'
cnt: 12, '((T([16, 512, 768], th.float16), [8192, 768]), {})'
Operator: aten.add.Tensor
cnt: 1, '((T([16, 512], th.int64), 2), {})'
cnt: 1, '((T([512], th.int64), 1), {})'
cnt: 1, '((T([16, 1, 512, 512], th.float16), T([16, 1, 512, 512], th.float16)), {})'
cnt: 49, '((T([16, 512, 768], th.float16), T([16, 512, 768], th.float16)), {})'
cnt: 12, '((T([16, 12, 512, 512], th.float16), T([16, 1, 512, 512], th.float16)), {})'
cnt: 24, '((T([8192, 768], th.float16), T([8192, 768], th.float16)), {})'
cnt: 1, '((T([50272, 768], th.float16), T([50272, 768], th.float16)), {})'
Operator: aten.addmm.default
cnt: 48, '((T([768], th.float16), T([8192, 768], th.float16), T([768, 768], th.float16, (1, 768))), {})'
cnt: 12, '((T([3072], th.float16), T([8192, 768], th.float16), T([768, 3072], th.float16, (1, 768))), {})'
cnt: 12, '((T([768], th.float16), T([8192, 3072], th.float16), T([3072, 768], th.float16, (1, 3072))), {})'
Operator: aten.bmm.default
cnt: 24, '((T([192, 512, 64], th.float16), T([192, 64, 512], th.float16, (32768, 1, 64))), {})'
cnt: 24, '((T([192, 512, 512], th.float16), T([192, 512, 64], th.float16)), {})'
cnt: 12, '((T([192, 512, 512], th.float16, (262144, 1, 512)), T([192, 512, 64], th.float16)), {})'
cnt: 12, '((T([192, 64, 512], th.float16, (32768, 1, 64)), T([192, 512, 512], th.float16)), {})'
Operator: aten.clone.default
cnt: 2, '((T([16, 512], th.int64),), {})'
Operator: aten.copy_.default
cnt: 2, '((T([16, 512], th.int64), T([16, 512], th.int64)), {})'
Operator: aten.cumsum.default
cnt: 1, '((T([16, 512], th.int64), 1), {})'
Operator: aten.embedding.default
cnt: 1, '((T([50272, 768], th.float16), T([16, 512], th.int64), 1), {})'
cnt: 1, '((T([2050, 768], th.float16), T([16, 512], th.int64)), {})'
Operator: aten.embedding_dense_backward.default
cnt: 1, '((T([16, 512, 768], th.float16), T([16, 512], th.int64), 2050, -1, False), {})'
cnt: 1, '((T([16, 512, 768], th.float16), T([16, 512], th.int64), 50272, 1, False), {})'
Operator: aten.lt.Tensor
cnt: 1, '((T([512], th.int64), T([512, 1], th.int64)), {})'
Operator: aten.masked_fill.Scalar
cnt: 1, '((T([16, 1, 512, 512], th.float16), T([16, 1, 512, 512], th.bool), -65504.0), {})'
Operator: aten.masked_fill_.Scalar
cnt: 1, '((T([512, 512], th.float32), T([512, 512], th.bool), 0), {})'
Operator: aten.mm.default
cnt: 1, '((T([8192, 768], th.float16), T([768, 50272], th.float16, (1, 768))), {})'
cnt: 1, '((T([50272, 8192], th.float16, (1, 50272)), T([8192, 768], th.float16)), {})'
cnt: 1, '((T([8192, 50272], th.float16), T([50272, 768], th.float16)), {})'
cnt: 12, '((T([8192, 768], th.float16), T([768, 3072], th.float16)), {})'
cnt: 12, '((T([768, 8192], th.float16, (1, 768)), T([8192, 3072], th.float16)), {})'
cnt: 12, '((T([8192, 3072], th.float16), T([3072, 768], th.float16)), {})'
cnt: 12, '((T([3072, 8192], th.float16, (1, 3072)), T([8192, 768], th.float16)), {})'
cnt: 48, '((T([8192, 768], th.float16), T([768, 768], th.float16)), {})'
cnt: 48, '((T([768, 8192], th.float16, (1, 768)), T([8192, 768], th.float16)), {})'
Operator: aten.mul.Tensor
cnt: 1, '((T([16, 512], th.int64), T([16, 512], th.int64)), {})'
cnt: 24, '((T([16, 512, 768], th.float16), 0.125), {})'
Operator: aten.native_layer_norm.default
cnt: 13, '((T([16, 512, 768], th.float16), [768], T([768], th.float16), T([768], th.float16), 1e-05), {})'
cnt: 12, '((T([8192, 768], th.float16), [768], T([768], th.float16), T([768], th.float16), 1e-05), {})'
Operator: aten.native_layer_norm_backward.default
cnt: 13, '((T([16, 512, 768], th.float16), T([16, 512, 768], th.float16), [768], T([16, 512, 1], th.float32), T([16, 512, 1], th.float32), T([768], th.float16), T([768], th.float16), [True, True, True]), {})'
cnt: 12, '((T([8192, 768], th.float16), T([8192, 768], th.float16), [768], T([8192, 1], th.float32), T([8192, 1], th.float32), T([768], th.float16), T([768], th.float16), [True, True, True]), {})'
Operator: aten.nll_loss_backward.default
cnt: 1, '((T([], th.float16), T([8176, 50272], th.float16), T([8176], th.int64), None, 1, -100, T([], th.float16)), {})'
Operator: aten.nll_loss_forward.default
cnt: 1, '((T([8176, 50272], th.float16), T([8176], th.int64), None, 1, -100), {})'
Operator: aten.relu.default
cnt: 12, '((T([8192, 3072], th.float16),), {})'
Operator: aten.rsub.Scalar
cnt: 1, '((T([16, 1, 512, 512], th.float16), 1.0), {})'
Operator: aten.slice_backward.default
cnt: 1, '((T([16, 511, 50272], th.float16), [16, 511, 50272], 2, 0, 9223372036854775807, 1), {})'
cnt: 1, '((T([16, 511, 50272], th.float16), [16, 512, 50272], 1, 0, -1, 1), {})'
Operator: aten.sub.Tensor
cnt: 1, '((T([16, 512], th.int64), 1), {})'
Operator: aten.sum.SymInt
cnt: 60, '((T([8192, 768], th.float16), [0], True), {})'
cnt: 12, '((T([8192, 3072], th.float16), [0], True), {})'
Operator: aten.threshold_backward.default
cnt: 12, '((T([8192, 3072], th.float16), T([8192, 3072], th.float16), 0), {})'
