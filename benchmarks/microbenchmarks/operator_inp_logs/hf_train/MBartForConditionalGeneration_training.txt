Operator: aten._log_softmax.default
cnt: 1, '((T([4096, 50265], th.float16), 1, False), {})'
Operator: aten._log_softmax_backward_data.default
cnt: 1, '((T([4096, 50265], th.float16), T([4096, 50265], th.float16), 1, th.float16), {})'
Operator: aten._softmax.default
cnt: 36, '((T([128, 512, 512], th.float16), -1, False), {})'
Operator: aten._softmax_backward_data.default
cnt: 36, '((T([128, 512, 512], th.float16), T([128, 512, 512], th.float16), -1, th.float16), {})'
Operator: aten._to_copy.default
cnt: 1, "((T([512, 512], th.float32),), {'dtype': th.float16})"
cnt: 1, '((T([8, 1, 512, 512], th.float16, (0, 262144, 512, 1)),), {\'device\': "th.device(\'cuda\')", \'dtype\': th.float16, \'layout\': th.strided})'
Operator: aten._unsafe_view.default
cnt: 108, '((T([8, 512, 16, 64], th.float16), [8, 512, 1024]), {})'
cnt: 1, '((T([4096, 50265], th.float16), [8, 512, 50265]), {})'
cnt: 36, '((T([8, 16, 512, 64], th.float16), [128, 512, 64]), {})'
cnt: 36, '((T([8, 512, 1024], th.float16), [4096, 1024]), {})'
Operator: aten.add.Tensor
cnt: 2, '((T([512], th.int64), 2), {})'
cnt: 2, '((T([8, 512, 1024], th.float16), T([512, 1024], th.float16)), {})'
cnt: 191, '((T([8, 512, 1024], th.float16), T([8, 512, 1024], th.float16)), {})'
cnt: 1, '((T([512], th.int64), 1), {})'
cnt: 12, '((T([8, 16, 512, 512], th.float16), T([8, 1, 512, 512], th.float16)), {})'
cnt: 1, '((T([8, 512, 50265], th.float16), T([1, 50265], th.float16)), {})'
cnt: 2, '((T([50265, 1024], th.float16), T([50265, 1024], th.float16)), {})'
Operator: aten.addmm.default
cnt: 144, '((T([1024], th.float16), T([4096, 1024], th.float16), T([1024, 1024], th.float16, (1, 1024))), {})'
cnt: 24, '((T([4096], th.float16), T([4096, 1024], th.float16), T([1024, 4096], th.float16, (1, 1024))), {})'
cnt: 24, '((T([1024], th.float16), T([4096, 4096], th.float16), T([4096, 1024], th.float16, (1, 4096))), {})'
Operator: aten.any.default
cnt: 24, '((T([8, 512, 1024], th.bool),), {})'
Operator: aten.bmm.default
cnt: 72, '((T([128, 512, 64], th.float16), T([128, 64, 512], th.float16, (32768, 1, 64))), {})'
cnt: 72, '((T([128, 512, 512], th.float16), T([128, 512, 64], th.float16)), {})'
cnt: 36, '((T([128, 512, 512], th.float16, (262144, 1, 512)), T([128, 512, 64], th.float16)), {})'
cnt: 36, '((T([128, 64, 512], th.float16, (32768, 1, 64)), T([128, 512, 512], th.float16)), {})'
Operator: aten.clone.default
cnt: 3, '((T([8, 512], th.int64),), {})'
cnt: 1, '((T([8, 511], th.int64, (512, 1)),), {})'
Operator: aten.copy_.default
cnt: 2, '((T([8, 512], th.int64), T([8, 512], th.int64)), {})'
cnt: 1, '((T([8, 511], th.int64, (512, 1)), T([8, 511], th.int64)), {})'
cnt: 1, '((T([8], th.int64, (512,)), T([8], th.int64)), {})'
Operator: aten.embedding.default
cnt: 2, '((T([50265, 1024], th.float16), T([8, 512], th.int64), 1), {})'
cnt: 2, '((T([1026, 1024], th.float16), T([512], th.int64)), {})'
Operator: aten.embedding_dense_backward.default
cnt: 2, '((T([512, 1024], th.float16), T([512], th.int64), 1026, -1, False), {})'
cnt: 2, '((T([8, 512, 1024], th.float16), T([8, 512], th.int64), 50265, 1, False), {})'
Operator: aten.eq.Scalar
cnt: 1, '((T([8, 512], th.int64), -100), {})'
Operator: aten.gather.default
cnt: 1, '((T([8, 512], th.int64), 1, T([8, 1], th.int64)), {})'
Operator: aten.gelu.default
cnt: 24, '((T([8, 512, 4096], th.float16),), {})'
Operator: aten.gelu_backward.default
cnt: 24, '((T([8, 512, 4096], th.float16), T([8, 512, 4096], th.float16)), {})'
Operator: aten.isinf.default
cnt: 12, '((T([8, 512, 1024], th.float16),), {})'
Operator: aten.isnan.default
cnt: 12, '((T([8, 512, 1024], th.float16),), {})'
Operator: aten.lt.Tensor
cnt: 1, '((T([512], th.int64), T([512, 1], th.int64)), {})'
Operator: aten.masked_fill_.Scalar
cnt: 1, '((T([8, 512], th.int64), T([8, 512], th.bool), 1), {})'
cnt: 1, '((T([512, 512], th.float32), T([512, 512], th.bool), 0), {})'
Operator: aten.mm.default
cnt: 1, '((T([4096, 1024], th.float16), T([1024, 50265], th.float16, (1, 1024))), {})'
cnt: 1, '((T([50265, 4096], th.float16, (1, 50265)), T([4096, 1024], th.float16)), {})'
cnt: 1, '((T([4096, 50265], th.float16), T([50265, 1024], th.float16)), {})'
cnt: 24, '((T([4096, 1024], th.float16), T([1024, 4096], th.float16)), {})'
cnt: 24, '((T([1024, 4096], th.float16, (1, 1024)), T([4096, 4096], th.float16)), {})'
cnt: 24, '((T([4096, 4096], th.float16), T([4096, 1024], th.float16)), {})'
cnt: 24, '((T([4096, 4096], th.float16, (1, 4096)), T([4096, 1024], th.float16)), {})'
cnt: 144, '((T([4096, 1024], th.float16), T([1024, 1024], th.float16)), {})'
cnt: 144, '((T([1024, 4096], th.float16, (1, 1024)), T([4096, 1024], th.float16)), {})'
Operator: aten.mul.Tensor
cnt: 4, '((T([8, 512, 1024], th.float16), 1.0), {})'
cnt: 72, '((T([8, 512, 1024], th.float16), 0.125), {})'
Operator: aten.native_layer_norm.default
cnt: 64, '((T([8, 512, 1024], th.float16), [1024], T([1024], th.float16), T([1024], th.float16), 1e-05), {})'
Operator: aten.native_layer_norm_backward.default
cnt: 64, '((T([8, 512, 1024], th.float16), T([8, 512, 1024], th.float16), [1024], T([8, 512, 1], th.float32), T([8, 512, 1], th.float32), T([1024], th.float16), T([1024], th.float16), [True, True, True]), {})'
Operator: aten.ne.Scalar
cnt: 1, '((T([8, 512], th.int64), 1), {})'
Operator: aten.nll_loss_backward.default
cnt: 1, '((T([], th.float16), T([4096, 50265], th.float16), T([4096], th.int64), None, 1, -100, T([], th.float16)), {})'
Operator: aten.nll_loss_forward.default
cnt: 1, '((T([4096, 50265], th.float16), T([4096], th.int64), None, 1, -100), {})'
Operator: aten.sub.Tensor
cnt: 1, '((T([8], th.int64), 1), {})'
Operator: aten.sum.SymInt
cnt: 168, '((T([4096, 1024], th.float16), [0], True), {})'
cnt: 24, '((T([4096, 4096], th.float16), [0], True), {})'
cnt: 2, '((T([8, 512, 1024], th.float16), [0], True), {})'
Operator: aten.sum.dim_IntList
cnt: 1, '((T([8, 512], th.bool), [1]), {})'
