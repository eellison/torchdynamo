Operator: aten._log_softmax.default
cnt: 1, '((T([1024, 50265], th.float16), 1, False), {})'
Operator: aten._log_softmax_backward_data.default
cnt: 1, '((T([1024, 50265], th.float16), T([1024, 50265], th.float16), 1, th.float16), {})'
Operator: aten._softmax.default
cnt: 12, '((T([1, 1024, 12, 513], th.float16, (6303744, 513, 525312, 1)), -1, True), {})'
Operator: aten._softmax_backward_data.default
cnt: 12, '((T([1, 1024, 12, 513], th.float32), T([1, 1024, 12, 513], th.float32), -1, th.float16), {})'
Operator: aten._to_copy.default
cnt: 1, "((T([1, 1, 1, 1024], th.float32),), {'dtype': th.float16})"
cnt: 1, "((T([1, 1024], th.bool),), {'dtype': th.int32})"
cnt: 1, '((T([1, 1024], th.int64),), {\'device\': "th.device(\'cuda\')", \'dtype\': th.int32, \'layout\': th.strided})'
cnt: 1, "((T([1, 1024], th.int32),), {'dtype': th.int64})"
cnt: 12, '((T([1, 1024, 1, 1], th.bool),), {\'device\': "th.device(\'cuda\')", \'dtype\': th.float16, \'layout\': th.strided})'
cnt: 12, '((T([1, 1024, 12, 513], th.float32),), {\'device\': "th.device(\'cuda\')", \'dtype\': th.float16, \'layout\': th.strided})'
cnt: 12, '((T([1, 1024, 12, 513], th.float16, (6303744, 513, 525312, 1)),), {\'device\': "th.device(\'cuda\')", \'dtype\': th.float32, \'layout\': th.strided})'
Operator: aten._unsafe_view.default
cnt: 12, '((T([12, 3, 512, 64, 1], th.float16), [36, 512, 64]), {})'
cnt: 12, '((T([12, 3, 64, 512, 1], th.float16), [36, 64, 512]), {})'
cnt: 12, '((T([12, 4, 768, 64, 1], th.float16), [48, 768, 64]), {})'
cnt: 24, '((T([1024, 1, 12, 64], th.float16), [1024, 1, 768]), {})'
cnt: 12, '((T([12, 4, 256, 1, 64], th.float16), [48, 256, 64]), {})'
cnt: 12, '((T([12, 4, 768, 64], th.int64), [2359296]), {})'
cnt: 12, '((T([12, 3, 512, 64], th.float16), [1179648]), {})'
cnt: 24, '((T([12, 3, 512, 64], th.int64), [1179648]), {})'
Operator: aten.add.Tensor
cnt: 1, '((T([1, 1024], th.int64), 1), {})'
cnt: 50, '((T([1, 1024, 768], th.float16), T([1, 1024, 768], th.float16)), {})'
cnt: 36, '((T([12, 3, 512, 513], th.float16), T([12, 3, 512, 513], th.float16)), {})'
cnt: 24, '((T([1024, 1, 768], th.float16), T([1024, 1, 768], th.float16)), {})'
cnt: 1, '((T([50265, 768], th.float16), T([50265, 768], th.float16)), {})'
Operator: aten.add_.Tensor
cnt: 12, '((T([1, 1024, 12, 513], th.float16, (6303744, 513, 525312, 1)), T([1, 1024, 1, 513], th.float16)), {})'
Operator: aten.addmm.default
cnt: 49, '((T([768], th.float16), T([1024, 768], th.float16), T([768, 768], th.float16, (1, 768))), {})'
cnt: 12, '((T([3072], th.float16), T([1024, 768], th.float16), T([768, 3072], th.float16, (1, 768))), {})'
cnt: 12, '((T([768], th.float16), T([1024, 3072], th.float16), T([3072, 768], th.float16, (1, 3072))), {})'
cnt: 1, '((T([50265], th.float16), T([1024, 768], th.float16), T([768, 50265], th.float16, (1, 768))), {})'
Operator: aten.any.default
cnt: 1, '((T([1024], th.bool),), {})'
Operator: aten.bmm.default
cnt: 12, '((T([36, 512, 64], th.float16), T([36, 64, 512], th.float16)), {})'
cnt: 12, '((T([48, 256, 768], th.float16, (197120, 769, 1)), T([48, 768, 64], th.float16)), {})'
cnt: 12, '((T([48, 768, 256], th.float16, (197120, 1, 769)), T([48, 256, 64], th.float16)), {})'
cnt: 12, '((T([48, 256, 64], th.float16), T([48, 64, 768], th.float16, (49152, 1, 64))), {})'
cnt: 12, '((T([36, 64, 512], th.float16, (32768, 1, 64)), T([36, 512, 512], th.float16)), {})'
cnt: 12, '((T([36, 512, 512], th.float16), T([36, 512, 64], th.float16, (32768, 1, 512))), {})'
Operator: aten.clone.default
cnt: 2, '((T([1, 1024], th.int64),), {})'
Operator: aten.constant_pad_nd.default
cnt: 12, '((T([12, 3, 512, 512], th.float16), [0, 0, 0, 1], 0.0), {})'
cnt: 12, '((T([1, 3, 512, 512], th.float16), [0, 0, 0, 1], 0.0), {})'
cnt: 12, '((T([12, 1024, 64], th.float16, (64, 768, 1)), [0, 0, 256, 256], -1.0), {})'
cnt: 12, '((T([12, 4, 256, 513], th.float16, (513, 1575936, 6156, 1)), [0, 257], 0.0), {})'
cnt: 12, '((T([12, 4, 256, 770], th.float16), [0, -257]), {})'
cnt: 12, '((T([12, 1536, 64], th.float16), [0, 0, -256, -256]), {})'
cnt: 12, '((T([12, 3, 513, 512], th.float16), [0, 0, 0, -1]), {})'
Operator: aten.copy_.default
cnt: 2, '((T([1, 1024], th.int64), T([1, 1024], th.int64)), {})'
cnt: 12, '((T([12, 3, 256, 257], th.float16, (525312, 131328, 513, 1)), T([12, 3, 256, 257], th.float16, (787968, 262656, 513, 1))), {})'
cnt: 12, '((T([12, 256, 257], th.float16, (525312, 513, 1)), T([12, 256, 257], th.float16, (787968, 513, 1))), {})'
cnt: 12, '((T([12, 3, 256, 256], th.float16, (525312, 131328, 513, 1)), T([12, 3, 256, 256], th.float16, (787968, 262656, 513, 1))), {})'
cnt: 12, '((T([12, 255, 255], th.float16, (525312, 513, 1)), T([12, 255, 255], th.float16, (787968, 513, 1))), {})'
cnt: 12, '((T([1, 3, 256, 257], th.float16, (525312, 131328, 513, 1)), T([1, 3, 256, 257], th.float16, (787968, 262656, 513, 1))), {})'
cnt: 12, '((T([1, 256, 257], th.float16, (525312, 513, 1)), T([1, 256, 257], th.float16, (787968, 513, 1))), {})'
cnt: 12, '((T([1, 3, 256, 256], th.float16, (525312, 131328, 513, 1)), T([1, 3, 256, 256], th.float16, (787968, 262656, 513, 1))), {})'
cnt: 12, '((T([1, 255, 255], th.float16, (525312, 513, 1)), T([1, 255, 255], th.float16, (787968, 513, 1))), {})'
cnt: 12, '((T([1024, 12, 513], th.float16, (513, 525312, 1)), T([1024, 12, 513], th.float16)), {})'
cnt: 84, '((T([12, 4, 256, 513], th.float16), T([12, 4, 256, 513], th.float16)), {})'
cnt: 12, '((T([1, 1024, 12, 513], th.float16, (6303744, 513, 525312, 1)), T([1, 1024, 12, 513], th.float16)), {})'
cnt: 24, '((T([1, 256, 12, 257], th.float16, (6303744, 513, 525312, 1)), T([1, 256, 12, 257], th.float16)), {})'
cnt: 12, '((T([12, 255, 255], th.float16, (525312, 513, 1)), T([12, 255, 255], th.float16)), {})'
cnt: 12, '((T([12, 3, 256, 256], th.float16, (525312, 131328, 513, 1)), T([12, 3, 256, 256], th.float16)), {})'
cnt: 12, '((T([12, 256, 257], th.float16, (525312, 513, 1)), T([12, 256, 257], th.float16)), {})'
cnt: 24, '((T([1024, 768], th.float16), T([1024, 768], th.float16)), {})'
cnt: 12, '((T([1024, 1, 768], th.float16), T([1024, 1, 768], th.float16)), {})'
Operator: aten.cumsum.default
cnt: 1, '((T([1, 1024], th.int32), 1), {})'
Operator: aten.div.Tensor
cnt: 12, '((T([1024, 1, 768], th.float16), 8.0), {})'
Operator: aten.div_.Tensor
cnt: 12, '((T([1024, 1, 768], th.float16), 8.0), {})'
Operator: aten.embedding.default
cnt: 1, '((T([50265, 768], th.float16), T([1, 1024], th.int64), 1), {})'
cnt: 1, '((T([4098, 768], th.float16), T([1, 1024], th.int64), 1), {})'
cnt: 1, '((T([1, 768], th.float16), T([1, 1024], th.int64)), {})'
Operator: aten.embedding_dense_backward.default
cnt: 1, '((T([1, 1024, 768], th.float16), T([1, 1024], th.int64), 1, -1, False), {})'
cnt: 1, '((T([1, 1024, 768], th.float16), T([1, 1024], th.int64), 4098, 1, False), {})'
cnt: 1, '((T([1, 1024, 768], th.float16), T([1, 1024], th.int64), 50265, 1, False), {})'
Operator: aten.eq.Scalar
cnt: 24, '((T([1, 256, 12, 257], th.float16, (65792, 257, 0, 1)), 1), {})'
cnt: 24, '((T([1, 256, 1, 257], th.float16), 1), {})'
Operator: aten.flip.default
cnt: 24, '((T([256, 257], th.float16), [0]), {})'
cnt: 24, '((T([1, 256, 1, 257], th.float16), [1, 3]), {})'
Operator: aten.gelu.default
cnt: 12, '((T([1, 1024, 3072], th.float16),), {})'
cnt: 1, '((T([1, 1024, 768], th.float16),), {})'
Operator: aten.gelu_backward.default
cnt: 1, '((T([1, 1024, 768], th.float16), T([1, 1024, 768], th.float16)), {})'
cnt: 12, '((T([1, 1024, 3072], th.float16), T([1, 1024, 3072], th.float16)), {})'
Operator: aten.gt.Scalar
cnt: 1, '((T([1, 1024], th.float16), 0), {})'
Operator: aten.index_add_.default
cnt: 12, '((T([1179648], th.float16), 0, T([2359296], th.int64), T([2359296], th.float16)), {})'
cnt: 24, '((T([786432], th.float16), 0, T([1179648], th.int64), T([1179648], th.float16)), {})'
Operator: aten.lt.Scalar
cnt: 1, '((T([1, 1024], th.float16), 0), {})'
Operator: aten.masked_fill.Scalar
cnt: 12, '((T([1, 1024, 1, 1], th.float16), T([1, 1024, 1, 1], th.bool), -10000.0), {})'
cnt: 12, '((T([1, 1024, 12, 513], th.float32), T([1, 1024, 1, 1], th.bool), 0.0), {})'
cnt: 12, '((T([1, 1024, 12, 513], th.float32, (6303744, 513, 525312, 1)), T([1, 1024, 1, 1], th.bool), 0), {})'
cnt: 24, '((T([1, 256, 12, 257], th.float16), T([1, 256, 12, 257], th.bool), 0), {})'
Operator: aten.masked_fill_.Scalar
cnt: 24, '((T([1, 256, 12, 257], th.float16, (6303744, 513, 525312, 1)), T([1, 256, 12, 257], th.bool), -inf), {})'
cnt: 24, '((T([1, 256, 1, 257], th.float16, (525312, 513, 525312, 1)), T([1, 256, 1, 257], th.bool), -inf), {})'
Operator: aten.mm.default
cnt: 1, '((T([1024, 50265], th.float16), T([50265, 768], th.float16)), {})'
cnt: 1, '((T([50265, 1024], th.float16, (1, 50265)), T([1024, 768], th.float16)), {})'
cnt: 49, '((T([1024, 768], th.float16), T([768, 768], th.float16)), {})'
cnt: 49, '((T([768, 1024], th.float16, (1, 768)), T([1024, 768], th.float16)), {})'
cnt: 12, '((T([1024, 768], th.float16), T([768, 3072], th.float16)), {})'
cnt: 12, '((T([768, 1024], th.float16, (1, 768)), T([1024, 3072], th.float16)), {})'
cnt: 12, '((T([1024, 3072], th.float16), T([3072, 768], th.float16)), {})'
cnt: 12, '((T([3072, 1024], th.float16, (1, 3072)), T([1024, 768], th.float16)), {})'
Operator: aten.mul.Tensor
cnt: 1, '((T([1, 1, 1, 1024], th.float16), -10000.0), {})'
cnt: 1, '((T([1, 1024], th.int32), T([1, 1024], th.int32)), {})'
cnt: 12, '((T([1, 3, 512, 1], th.float16, (1024, 256, 1, 1)), T([1, 3, 1, 512], th.float16, (1024, 256, 1, 1))), {})'
Operator: aten.native_layer_norm.default
cnt: 26, '((T([1, 1024, 768], th.float16), [768], T([768], th.float16), T([768], th.float16), 1e-05), {})'
Operator: aten.native_layer_norm_backward.default
cnt: 26, '((T([1, 1024, 768], th.float16), T([1, 1024, 768], th.float16), [768], T([1, 1024, 1], th.float32), T([1, 1024, 1], th.float32), T([768], th.float16), T([768], th.float16), [True, True, True]), {})'
Operator: aten.ne.Scalar
cnt: 1, '((T([1, 1024], th.int64), 1), {})'
cnt: 12, '((T([1, 1024], th.float16), 0), {})'
Operator: aten.new_empty.default
cnt: 12, '((T([12, 3, 512, 513], th.float16), [12, 4, 256, 513]), {\'device\': "th.device(\'cuda\')", \'dtype\': th.float16, \'layout\': th.strided, \'pin_memory\': False})'
cnt: 12, '((T([1, 3, 512, 513], th.float16), [1, 4, 256, 513]), {\'device\': "th.device(\'cuda\')", \'dtype\': th.float16, \'layout\': th.strided, \'pin_memory\': False})'
Operator: aten.new_empty_strided.default
cnt: 84, '((T([12, 4, 256, 513], th.float16), [12, 4, 256, 513], [525312, 131328, 513, 1]), {})'
cnt: 12, '((T([1024, 768], th.float16), [1024, 768], [768, 1]), {})'
Operator: aten.new_ones.default
cnt: 12, '((T([1, 1024, 12, 513], th.float16, (6303744, 513, 525312, 1)), [256, 257]), {\'device\': "th.device(\'cuda\')", \'dtype\': th.float16, \'layout\': th.strided, \'pin_memory\': False})'
cnt: 12, '((T([1, 1024, 1, 1], th.float16), [1, 1024, 1, 1]), {\'device\': "th.device(\'cuda\')", \'dtype\': th.float16, \'layout\': th.strided, \'pin_memory\': False})'
cnt: 12, '((T([1, 1024, 1, 513], th.float16), [256, 257]), {\'device\': "th.device(\'cuda\')", \'dtype\': th.float16, \'layout\': th.strided, \'pin_memory\': False})'
Operator: aten.new_zeros.default
cnt: 12, '((T([12, 4, 768, 64], th.float16), [1179648]), {})'
cnt: 12, '((T([1024, 12, 513], th.float16), [6303744]), {})'
cnt: 12, '((T([12, 3, 512, 64], th.float16, (98304, 32768, 1, 512)), [786432]), {})'
cnt: 12, '((T([12, 3, 512, 64], th.float16), [786432]), {})'
cnt: 12, '((T([1024, 768], th.float16), [786432]), {})'
Operator: aten.nll_loss_backward.default
cnt: 1, '((T([], th.float16), T([1024, 50265], th.float16), T([1024], th.int64), None, 1, -100, T([], th.float16)), {})'
Operator: aten.nll_loss_forward.default
cnt: 1, '((T([1024, 50265], th.float16), T([1024], th.int64), None, 1, -100), {})'
Operator: aten.rsub.Scalar
cnt: 1, '((T([1, 1, 1, 1024], th.float16), 1.0), {})'
Operator: aten.select_backward.default
cnt: 12, '((T([12, 512, 513], th.float16), [12, 3, 512, 513], 1, 0), {})'
cnt: 12, '((T([12, 512, 513], th.float16), [12, 3, 512, 513], 1, -1), {})'
Operator: aten.slice_backward.default
cnt: 12, '((T([12, 4, 256, 768], th.float16), [12, 4, 256, 769], 3, 0, -1, 1), {})'
cnt: 12, '((T([12, 4, 256, 769], th.float16), [12, 4, 256, 769], 2, 0, 9223372036854775807, 1), {})'
cnt: 12, '((T([12, 4, 256, 769], th.float16), [12, 4, 256, 769], 1, 0, 9223372036854775807, 1), {})'
cnt: 12, '((T([12, 4, 256, 769], th.float16), [12, 4, 256, 769], 0, 0, 9223372036854775807, 1), {})'
cnt: 12, '((T([12, 4, 196864], th.float16), [12, 4, 197120], 2, 0, -256, 1), {})'
cnt: 12, '((T([12, 4, 197120], th.float16), [12, 4, 197120], 1, 0, 9223372036854775807, 1), {})'
cnt: 12, '((T([12, 4, 197120], th.float16), [12, 4, 197120], 0, 0, 9223372036854775807, 1), {})'
cnt: 12, '((T([12, 255, 255], th.float16), [12, 255, 513], 2, -255, 9223372036854775807, 1), {})'
cnt: 12, '((T([12, 255, 513], th.float16), [12, 512, 513], 1, 0, 255, 1), {})'
cnt: 48, '((T([12, 3, 512, 513], th.float16), [12, 3, 512, 513], 0, 0, 9223372036854775807, 1), {})'
cnt: 12, '((T([12, 3, 256, 256], th.float16), [12, 3, 256, 513], 3, 257, 9223372036854775807, 1), {})'
cnt: 12, '((T([12, 3, 256, 513], th.float16), [12, 3, 512, 513], 2, -257, -1, 1), {})'
cnt: 24, '((T([12, 3, 512, 513], th.float16), [12, 3, 512, 513], 1, 0, 9223372036854775807, 1), {})'
cnt: 12, '((T([12, 256, 257], th.float16), [12, 256, 513], 2, 0, 257, 1), {})'
cnt: 12, '((T([12, 256, 513], th.float16), [12, 512, 513], 1, 256, 9223372036854775807, 1), {})'
cnt: 12, '((T([12, 3, 256, 257], th.float16), [12, 3, 256, 513], 3, 0, 257, 1), {})'
cnt: 12, '((T([12, 3, 256, 513], th.float16), [12, 3, 512, 513], 2, 0, 256, 1), {})'
Operator: aten.sum.SymInt
cnt: 1, '((T([1024, 50265], th.float16), [0], True), {})'
cnt: 61, '((T([1024, 768], th.float16), [0], True), {})'
cnt: 12, '((T([1024, 3072], th.float16), [0], True), {})'
Operator: aten.tril.default
cnt: 24, '((T([256, 257], th.float16),), {})'
