Operator: aten._log_softmax.default
cnt: 1, '((T([128, 1000], th.float16), 1, False), {})'
Operator: aten._log_softmax_backward_data.default
cnt: 1, '((T([128, 1000], th.float16), T([128, 1000], th.float16), 1, th.float16), {})'
Operator: aten.add.Tensor
cnt: 1, '((T([128, 512, 7, 7], th.float16), T([128, 512, 7, 7], th.float16)), {})'
cnt: 2, '((T([128, 256, 14, 14], th.float16), T([128, 256, 14, 14], th.float16)), {})'
cnt: 2, '((T([128, 128, 28, 28], th.float16), T([128, 128, 28, 28], th.float16)), {})'
cnt: 3, '((T([128, 64, 56, 56], th.float16), T([128, 64, 56, 56], th.float16)), {})'
Operator: aten.add_.Tensor
cnt: 20, '((T([], th.int64), 1), {})'
cnt: 2, '((T([128, 64, 56, 56], th.float16), T([128, 64, 56, 56], th.float16)), {})'
cnt: 2, '((T([128, 128, 28, 28], th.float16), T([128, 128, 28, 28], th.float16)), {})'
cnt: 2, '((T([128, 256, 14, 14], th.float16), T([128, 256, 14, 14], th.float16)), {})'
cnt: 2, '((T([128, 512, 7, 7], th.float16), T([128, 512, 7, 7], th.float16)), {})'
Operator: aten.addmm.default
cnt: 1, '((T([1000], th.float16), T([128, 512], th.float16), T([512, 1000], th.float16, (1, 512))), {})'
Operator: aten.clone.default
cnt: 1, '((T([128, 3, 224, 224], th.float16),), {})'
Operator: aten.convolution.default
cnt: 1, '((T([128, 3, 224, 224], th.float16), T([64, 3, 7, 7], th.float16), None, [2, 2], [3, 3], [1, 1], False, [0, 0], 1), {})'
cnt: 4, '((T([128, 64, 56, 56], th.float16), T([64, 64, 3, 3], th.float16), None, [1, 1], [1, 1], [1, 1], False, [0, 0], 1), {})'
cnt: 1, '((T([128, 64, 56, 56], th.float16), T([128, 64, 3, 3], th.float16), None, [2, 2], [1, 1], [1, 1], False, [0, 0], 1), {})'
cnt: 3, '((T([128, 128, 28, 28], th.float16), T([128, 128, 3, 3], th.float16), None, [1, 1], [1, 1], [1, 1], False, [0, 0], 1), {})'
cnt: 1, '((T([128, 64, 56, 56], th.float16), T([128, 64, 1, 1], th.float16), None, [2, 2], [0, 0], [1, 1], False, [0, 0], 1), {})'
cnt: 1, '((T([128, 128, 28, 28], th.float16), T([256, 128, 3, 3], th.float16), None, [2, 2], [1, 1], [1, 1], False, [0, 0], 1), {})'
cnt: 3, '((T([128, 256, 14, 14], th.float16), T([256, 256, 3, 3], th.float16), None, [1, 1], [1, 1], [1, 1], False, [0, 0], 1), {})'
cnt: 1, '((T([128, 128, 28, 28], th.float16), T([256, 128, 1, 1], th.float16), None, [2, 2], [0, 0], [1, 1], False, [0, 0], 1), {})'
cnt: 1, '((T([128, 256, 14, 14], th.float16), T([512, 256, 3, 3], th.float16), None, [2, 2], [1, 1], [1, 1], False, [0, 0], 1), {})'
cnt: 3, '((T([128, 512, 7, 7], th.float16), T([512, 512, 3, 3], th.float16), None, [1, 1], [1, 1], [1, 1], False, [0, 0], 1), {})'
cnt: 1, '((T([128, 256, 14, 14], th.float16), T([512, 256, 1, 1], th.float16), None, [2, 2], [0, 0], [1, 1], False, [0, 0], 1), {})'
Operator: aten.convolution_backward.default
cnt: 3, '((T([128, 512, 7, 7], th.float16), T([128, 512, 7, 7], th.float16), T([512, 512, 3, 3], th.float16), [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False]), {})'
cnt: 1, '((T([128, 512, 7, 7], th.float16), T([128, 256, 14, 14], th.float16), T([512, 256, 1, 1], th.float16), [0], [2, 2], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False]), {})'
cnt: 1, '((T([128, 512, 7, 7], th.float16), T([128, 256, 14, 14], th.float16), T([512, 256, 3, 3], th.float16), [0], [2, 2], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False]), {})'
cnt: 3, '((T([128, 256, 14, 14], th.float16), T([128, 256, 14, 14], th.float16), T([256, 256, 3, 3], th.float16), [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False]), {})'
cnt: 1, '((T([128, 256, 14, 14], th.float16), T([128, 128, 28, 28], th.float16), T([256, 128, 1, 1], th.float16), [0], [2, 2], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False]), {})'
cnt: 1, '((T([128, 256, 14, 14], th.float16), T([128, 128, 28, 28], th.float16), T([256, 128, 3, 3], th.float16), [0], [2, 2], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False]), {})'
cnt: 3, '((T([128, 128, 28, 28], th.float16), T([128, 128, 28, 28], th.float16), T([128, 128, 3, 3], th.float16), [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False]), {})'
cnt: 1, '((T([128, 128, 28, 28], th.float16), T([128, 64, 56, 56], th.float16), T([128, 64, 1, 1], th.float16), [0], [2, 2], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False]), {})'
cnt: 1, '((T([128, 128, 28, 28], th.float16), T([128, 64, 56, 56], th.float16), T([128, 64, 3, 3], th.float16), [0], [2, 2], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False]), {})'
cnt: 4, '((T([128, 64, 56, 56], th.float16), T([128, 64, 56, 56], th.float16), T([64, 64, 3, 3], th.float16), [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False]), {})'
cnt: 1, '((T([128, 64, 112, 112], th.float16), T([128, 3, 224, 224], th.float16), T([64, 3, 7, 7], th.float16), [0], [2, 2], [3, 3], [1, 1], False, [0, 0], 1, [False, True, False]), {})'
Operator: aten.copy_.default
cnt: 1, '((T([128, 3, 224, 224], th.float16), T([128, 3, 224, 224], th.float16)), {})'
Operator: aten.div.Scalar
cnt: 1, '((T([128, 512, 7, 7], th.float16, (512, 1, 0, 0)), 49), {})'
Operator: aten.max_pool2d_with_indices.default
cnt: 1, '((T([128, 64, 112, 112], th.float16), [3, 3], [2, 2], [1, 1]), {})'
Operator: aten.max_pool2d_with_indices_backward.default
cnt: 1, '((T([128, 64, 56, 56], th.float16), T([128, 64, 112, 112], th.float16), [3, 3], [2, 2], [1, 1], [1, 1], False, T([128, 64, 56, 56], th.int64)), {})'
Operator: aten.mean.dim
cnt: 1, '((T([128, 512, 7, 7], th.float16), [-1, -2], True), {})'
Operator: aten.mm.default
cnt: 1, '((T([128, 1000], th.float16), T([1000, 512], th.float16)), {})'
cnt: 1, '((T([1000, 128], th.float16, (1, 1000)), T([128, 512], th.float16)), {})'
Operator: aten.native_batch_norm.default
cnt: 1, '((T([128, 64, 112, 112], th.float16), T([64], th.float16), T([64], th.float16), T([64], th.float16), T([64], th.float16), True, 0.1, 1e-05), {})'
cnt: 4, '((T([128, 64, 56, 56], th.float16), T([64], th.float16), T([64], th.float16), T([64], th.float16), T([64], th.float16), True, 0.1, 1e-05), {})'
cnt: 5, '((T([128, 128, 28, 28], th.float16), T([128], th.float16), T([128], th.float16), T([128], th.float16), T([128], th.float16), True, 0.1, 1e-05), {})'
cnt: 5, '((T([128, 256, 14, 14], th.float16), T([256], th.float16), T([256], th.float16), T([256], th.float16), T([256], th.float16), True, 0.1, 1e-05), {})'
cnt: 5, '((T([128, 512, 7, 7], th.float16), T([512], th.float16), T([512], th.float16), T([512], th.float16), T([512], th.float16), True, 0.1, 1e-05), {})'
Operator: aten.native_batch_norm_backward.default
cnt: 5, '((T([128, 512, 7, 7], th.float16), T([128, 512, 7, 7], th.float16), T([512], th.float16), T([512], th.float16), T([512], th.float16), T([512], th.float32), T([512], th.float32), True, 1e-05, [True, True, True]), {})'
cnt: 5, '((T([128, 256, 14, 14], th.float16), T([128, 256, 14, 14], th.float16), T([256], th.float16), T([256], th.float16), T([256], th.float16), T([256], th.float32), T([256], th.float32), True, 1e-05, [True, True, True]), {})'
cnt: 5, '((T([128, 128, 28, 28], th.float16), T([128, 128, 28, 28], th.float16), T([128], th.float16), T([128], th.float16), T([128], th.float16), T([128], th.float32), T([128], th.float32), True, 1e-05, [True, True, True]), {})'
cnt: 4, '((T([128, 64, 56, 56], th.float16), T([128, 64, 56, 56], th.float16), T([64], th.float16), T([64], th.float16), T([64], th.float16), T([64], th.float32), T([64], th.float32), True, 1e-05, [True, True, True]), {})'
cnt: 1, '((T([128, 64, 112, 112], th.float16), T([128, 64, 112, 112], th.float16), T([64], th.float16), T([64], th.float16), T([64], th.float16), T([64], th.float32), T([64], th.float32), True, 1e-05, [True, True, True]), {})'
Operator: aten.nll_loss_backward.default
cnt: 1, '((T([], th.float16), T([128, 1000], th.float16), T([128], th.int64), None, 1, -100, T([], th.float16)), {})'
Operator: aten.nll_loss_forward.default
cnt: 1, '((T([128, 1000], th.float16), T([128], th.int64), None, 1, -100), {})'
Operator: aten.relu_.default
cnt: 1, '((T([128, 64, 112, 112], th.float16),), {})'
cnt: 4, '((T([128, 64, 56, 56], th.float16),), {})'
cnt: 4, '((T([128, 128, 28, 28], th.float16),), {})'
cnt: 4, '((T([128, 256, 14, 14], th.float16),), {})'
cnt: 4, '((T([128, 512, 7, 7], th.float16),), {})'
Operator: aten.sum.SymInt
cnt: 1, '((T([128, 1000], th.float16), [0], True), {})'
Operator: aten.threshold_backward.default
cnt: 4, '((T([128, 512, 7, 7], th.float16), T([128, 512, 7, 7], th.float16), 0), {})'
cnt: 4, '((T([128, 256, 14, 14], th.float16), T([128, 256, 14, 14], th.float16), 0), {})'
cnt: 4, '((T([128, 128, 28, 28], th.float16), T([128, 128, 28, 28], th.float16), 0), {})'
cnt: 4, '((T([128, 64, 56, 56], th.float16), T([128, 64, 56, 56], th.float16), 0), {})'
cnt: 1, '((T([128, 64, 112, 112], th.float16), T([128, 64, 112, 112], th.float16), 0), {})'
