Operator: aten.add.Tensor
cnt: 1, '((T([96, 512, 4, 4], th.float16), T([96, 512, 4, 4], th.float16)), {})'
cnt: 2, '((T([96, 256, 8, 8], th.float16), T([96, 256, 8, 8], th.float16)), {})'
cnt: 2, '((T([96, 128, 16, 16], th.float16), T([96, 128, 16, 16], th.float16)), {})'
cnt: 2, '((T([96, 64, 32, 32], th.float16), T([96, 64, 32, 32], th.float16)), {})'
cnt: 1, '((T([96, 64, 64, 64], th.float16), T([96, 64, 64, 64], th.float16)), {})'
Operator: aten.add_.Tensor
cnt: 2, '((T([96, 64, 32, 32], th.float16), T([96, 64, 32, 32], th.float16)), {})'
cnt: 2, '((T([96, 128, 16, 16], th.float16), T([96, 128, 16, 16], th.float16)), {})'
cnt: 2, '((T([96, 256, 8, 8], th.float16), T([96, 256, 8, 8], th.float16)), {})'
cnt: 2, '((T([96, 512, 4, 4], th.float16), T([96, 512, 4, 4], th.float16)), {})'
Operator: aten.addmm.default
cnt: 1, '((T([65], th.float16), T([96, 512], th.float16), T([512, 65], th.float16, (1, 512))), {})'
Operator: aten.avg_pool2d.default
cnt: 1, '((T([96, 512, 4, 4], th.float16), [4, 4]), {})'
Operator: aten.avg_pool2d_backward.default
cnt: 1, '((T([96, 512, 1, 1], th.float16), T([96, 512, 4, 4], th.float16), [4, 4], [], [0, 0], False, True, None), {})'
Operator: aten.clone.default
cnt: 1, '((T([96, 9, 128, 128], th.float16),), {})'
Operator: aten.convolution.default
cnt: 1, '((T([96, 9, 128, 128], th.float16), T([64, 9, 3, 3], th.float16), None, [2, 2], [1, 1], [1, 1], False, [0, 0], 1), {})'
cnt: 1, '((T([96, 64, 64, 64], th.float16), T([64, 64, 3, 3], th.float16), None, [2, 2], [1, 1], [1, 1], False, [0, 0], 1), {})'
cnt: 3, '((T([96, 64, 32, 32], th.float16), T([64, 64, 3, 3], th.float16), None, [1, 1], [1, 1], [1, 1], False, [0, 0], 1), {})'
cnt: 1, '((T([96, 64, 64, 64], th.float16), T([64, 64, 1, 1], th.float16), None, [2, 2], [0, 0], [1, 1], False, [0, 0], 1), {})'
cnt: 1, '((T([96, 64, 32, 32], th.float16), T([128, 64, 3, 3], th.float16), None, [2, 2], [1, 1], [1, 1], False, [0, 0], 1), {})'
cnt: 3, '((T([96, 128, 16, 16], th.float16), T([128, 128, 3, 3], th.float16), None, [1, 1], [1, 1], [1, 1], False, [0, 0], 1), {})'
cnt: 1, '((T([96, 64, 32, 32], th.float16), T([128, 64, 1, 1], th.float16), None, [2, 2], [0, 0], [1, 1], False, [0, 0], 1), {})'
cnt: 1, '((T([96, 128, 16, 16], th.float16), T([256, 128, 3, 3], th.float16), None, [2, 2], [1, 1], [1, 1], False, [0, 0], 1), {})'
cnt: 3, '((T([96, 256, 8, 8], th.float16), T([256, 256, 3, 3], th.float16), None, [1, 1], [1, 1], [1, 1], False, [0, 0], 1), {})'
cnt: 1, '((T([96, 128, 16, 16], th.float16), T([256, 128, 1, 1], th.float16), None, [2, 2], [0, 0], [1, 1], False, [0, 0], 1), {})'
cnt: 1, '((T([96, 256, 8, 8], th.float16), T([512, 256, 3, 3], th.float16), None, [2, 2], [1, 1], [1, 1], False, [0, 0], 1), {})'
cnt: 3, '((T([96, 512, 4, 4], th.float16), T([512, 512, 3, 3], th.float16), None, [1, 1], [1, 1], [1, 1], False, [0, 0], 1), {})'
cnt: 1, '((T([96, 256, 8, 8], th.float16), T([512, 256, 1, 1], th.float16), None, [2, 2], [0, 0], [1, 1], False, [0, 0], 1), {})'
Operator: aten.convolution_backward.default
cnt: 3, '((T([96, 512, 4, 4], th.float16), T([96, 512, 4, 4], th.float16), T([512, 512, 3, 3], th.float16), [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False]), {})'
cnt: 1, '((T([96, 512, 4, 4], th.float16), T([96, 256, 8, 8], th.float16), T([512, 256, 1, 1], th.float16), [0], [2, 2], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False]), {})'
cnt: 1, '((T([96, 512, 4, 4], th.float16), T([96, 256, 8, 8], th.float16), T([512, 256, 3, 3], th.float16), [0], [2, 2], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False]), {})'
cnt: 3, '((T([96, 256, 8, 8], th.float16), T([96, 256, 8, 8], th.float16), T([256, 256, 3, 3], th.float16), [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False]), {})'
cnt: 1, '((T([96, 256, 8, 8], th.float16), T([96, 128, 16, 16], th.float16), T([256, 128, 1, 1], th.float16), [0], [2, 2], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False]), {})'
cnt: 1, '((T([96, 256, 8, 8], th.float16), T([96, 128, 16, 16], th.float16), T([256, 128, 3, 3], th.float16), [0], [2, 2], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False]), {})'
cnt: 3, '((T([96, 128, 16, 16], th.float16), T([96, 128, 16, 16], th.float16), T([128, 128, 3, 3], th.float16), [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False]), {})'
cnt: 1, '((T([96, 128, 16, 16], th.float16), T([96, 64, 32, 32], th.float16), T([128, 64, 1, 1], th.float16), [0], [2, 2], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False]), {})'
cnt: 1, '((T([96, 128, 16, 16], th.float16), T([96, 64, 32, 32], th.float16), T([128, 64, 3, 3], th.float16), [0], [2, 2], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False]), {})'
cnt: 3, '((T([96, 64, 32, 32], th.float16), T([96, 64, 32, 32], th.float16), T([64, 64, 3, 3], th.float16), [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False]), {})'
cnt: 1, '((T([96, 64, 32, 32], th.float16), T([96, 64, 64, 64], th.float16), T([64, 64, 1, 1], th.float16), [0], [2, 2], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False]), {})'
cnt: 1, '((T([96, 64, 32, 32], th.float16), T([96, 64, 64, 64], th.float16), T([64, 64, 3, 3], th.float16), [0], [2, 2], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False]), {})'
cnt: 1, '((T([96, 64, 64, 64], th.float16), T([96, 9, 128, 128], th.float16), T([64, 9, 3, 3], th.float16), [0], [2, 2], [1, 1], [1, 1], False, [0, 0], 1, [False, True, False]), {})'
Operator: aten.copy_.default
cnt: 1, '((T([96, 9, 128, 128], th.float16), T([96, 9, 128, 128], th.float16)), {})'
Operator: aten.div.Tensor
cnt: 2, '((T([], th.float16), 6240), {})'
Operator: aten.mm.default
cnt: 1, '((T([96, 65], th.float16), T([65, 512], th.float16)), {})'
cnt: 1, '((T([65, 96], th.float16, (1, 65)), T([96, 512], th.float16)), {})'
Operator: aten.native_batch_norm.default
cnt: 1, '((T([96, 64, 64, 64], th.float16), T([64], th.float16), T([64], th.float16), T([64], th.float16), T([64], th.float16), False, 0.1, 1e-05), {})'
cnt: 5, '((T([96, 64, 32, 32], th.float16), T([64], th.float16), T([64], th.float16), T([64], th.float16), T([64], th.float16), False, 0.1, 1e-05), {})'
cnt: 5, '((T([96, 128, 16, 16], th.float16), T([128], th.float16), T([128], th.float16), T([128], th.float16), T([128], th.float16), False, 0.1, 1e-05), {})'
cnt: 5, '((T([96, 256, 8, 8], th.float16), T([256], th.float16), T([256], th.float16), T([256], th.float16), T([256], th.float16), False, 0.1, 1e-05), {})'
cnt: 5, '((T([96, 512, 4, 4], th.float16), T([512], th.float16), T([512], th.float16), T([512], th.float16), T([512], th.float16), False, 0.1, 1e-05), {})'
Operator: aten.native_batch_norm_backward.default
cnt: 5, '((T([96, 512, 4, 4], th.float16), T([96, 512, 4, 4], th.float16), T([512], th.float16), T([512], th.float16), T([512], th.float16), T([512], th.float32), T([512], th.float32), False, 1e-05, [True, True, True]), {})'
cnt: 5, '((T([96, 256, 8, 8], th.float16), T([96, 256, 8, 8], th.float16), T([256], th.float16), T([256], th.float16), T([256], th.float16), T([256], th.float32), T([256], th.float32), False, 1e-05, [True, True, True]), {})'
cnt: 5, '((T([96, 128, 16, 16], th.float16), T([96, 128, 16, 16], th.float16), T([128], th.float16), T([128], th.float16), T([128], th.float16), T([128], th.float32), T([128], th.float32), False, 1e-05, [True, True, True]), {})'
cnt: 5, '((T([96, 64, 32, 32], th.float16), T([96, 64, 32, 32], th.float16), T([64], th.float16), T([64], th.float16), T([64], th.float16), T([64], th.float32), T([64], th.float32), False, 1e-05, [True, True, True]), {})'
cnt: 1, '((T([96, 64, 64, 64], th.float16), T([96, 64, 64, 64], th.float16), T([64], th.float16), T([64], th.float16), T([64], th.float16), T([64], th.float32), T([64], th.float32), False, 1e-05, [True, True, True]), {})'
Operator: aten.relu.default
cnt: 1, '((T([96, 64, 64, 64], th.float16),), {})'
cnt: 4, '((T([96, 64, 32, 32], th.float16),), {})'
cnt: 4, '((T([96, 128, 16, 16], th.float16),), {})'
cnt: 4, '((T([96, 256, 8, 8], th.float16),), {})'
cnt: 4, '((T([96, 512, 4, 4], th.float16),), {})'
Operator: aten.sigmoid.default
cnt: 1, '((T([96, 65], th.float16),), {})'
Operator: aten.sigmoid_backward.default
cnt: 1, '((T([96, 65], th.float16, (0, 0)), T([96, 65], th.float16)), {})'
Operator: aten.sum.SymInt
cnt: 1, '((T([96, 65], th.float16), [0], True), {})'
Operator: aten.sum.default
cnt: 1, '((T([96, 65], th.float16),), {})'
Operator: aten.threshold_backward.default
cnt: 4, '((T([96, 512, 4, 4], th.float16), T([96, 512, 4, 4], th.float16), 0), {})'
cnt: 4, '((T([96, 256, 8, 8], th.float16), T([96, 256, 8, 8], th.float16), 0), {})'
cnt: 4, '((T([96, 128, 16, 16], th.float16), T([96, 128, 16, 16], th.float16), 0), {})'
cnt: 4, '((T([96, 64, 32, 32], th.float16), T([96, 64, 32, 32], th.float16), 0), {})'
cnt: 1, '((T([96, 64, 64, 64], th.float16), T([96, 64, 64, 64], th.float16), 0), {})'
