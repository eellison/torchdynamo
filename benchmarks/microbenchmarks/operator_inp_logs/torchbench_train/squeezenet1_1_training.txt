Operator: aten.add.Tensor
cnt: 2, '((T([32, 64, 13, 13], th.float16), T([32, 64, 13, 13], th.float16)), {})'
cnt: 2, '((T([32, 48, 13, 13], th.float16), T([32, 48, 13, 13], th.float16)), {})'
cnt: 2, '((T([32, 32, 27, 27], th.float16), T([32, 32, 27, 27], th.float16)), {})'
cnt: 2, '((T([32, 16, 55, 55], th.float16), T([32, 16, 55, 55], th.float16)), {})'
Operator: aten.cat.default
cnt: 2, '(([T([32, 64, 55, 55], th.float16), T([32, 64, 55, 55], th.float16)], 1), {})'
cnt: 2, '(([T([32, 128, 27, 27], th.float16), T([32, 128, 27, 27], th.float16)], 1), {})'
cnt: 2, '(([T([32, 192, 13, 13], th.float16), T([32, 192, 13, 13], th.float16)], 1), {})'
cnt: 2, '(([T([32, 256, 13, 13], th.float16), T([32, 256, 13, 13], th.float16)], 1), {})'
Operator: aten.clone.default
cnt: 1, '((T([32, 3, 224, 224], th.float16),), {})'
Operator: aten.convolution.default
cnt: 1, '((T([32, 3, 224, 224], th.float16), T([64, 3, 3, 3], th.float16), T([64], th.float16), [2, 2], [0, 0], [1, 1], False, [0, 0], 1), {})'
cnt: 1, '((T([32, 64, 55, 55], th.float16), T([16, 64, 1, 1], th.float16), T([16], th.float16), [1, 1], [0, 0], [1, 1], False, [0, 0], 1), {})'
cnt: 2, '((T([32, 16, 55, 55], th.float16), T([64, 16, 1, 1], th.float16), T([64], th.float16), [1, 1], [0, 0], [1, 1], False, [0, 0], 1), {})'
cnt: 2, '((T([32, 16, 55, 55], th.float16), T([64, 16, 3, 3], th.float16), T([64], th.float16), [1, 1], [1, 1], [1, 1], False, [0, 0], 1), {})'
cnt: 1, '((T([32, 128, 55, 55], th.float16), T([16, 128, 1, 1], th.float16), T([16], th.float16), [1, 1], [0, 0], [1, 1], False, [0, 0], 1), {})'
cnt: 1, '((T([32, 128, 27, 27], th.float16), T([32, 128, 1, 1], th.float16), T([32], th.float16), [1, 1], [0, 0], [1, 1], False, [0, 0], 1), {})'
cnt: 2, '((T([32, 32, 27, 27], th.float16), T([128, 32, 1, 1], th.float16), T([128], th.float16), [1, 1], [0, 0], [1, 1], False, [0, 0], 1), {})'
cnt: 2, '((T([32, 32, 27, 27], th.float16), T([128, 32, 3, 3], th.float16), T([128], th.float16), [1, 1], [1, 1], [1, 1], False, [0, 0], 1), {})'
cnt: 1, '((T([32, 256, 27, 27], th.float16), T([32, 256, 1, 1], th.float16), T([32], th.float16), [1, 1], [0, 0], [1, 1], False, [0, 0], 1), {})'
cnt: 1, '((T([32, 256, 13, 13], th.float16), T([48, 256, 1, 1], th.float16), T([48], th.float16), [1, 1], [0, 0], [1, 1], False, [0, 0], 1), {})'
cnt: 2, '((T([32, 48, 13, 13], th.float16), T([192, 48, 1, 1], th.float16), T([192], th.float16), [1, 1], [0, 0], [1, 1], False, [0, 0], 1), {})'
cnt: 2, '((T([32, 48, 13, 13], th.float16), T([192, 48, 3, 3], th.float16), T([192], th.float16), [1, 1], [1, 1], [1, 1], False, [0, 0], 1), {})'
cnt: 1, '((T([32, 384, 13, 13], th.float16), T([48, 384, 1, 1], th.float16), T([48], th.float16), [1, 1], [0, 0], [1, 1], False, [0, 0], 1), {})'
cnt: 1, '((T([32, 384, 13, 13], th.float16), T([64, 384, 1, 1], th.float16), T([64], th.float16), [1, 1], [0, 0], [1, 1], False, [0, 0], 1), {})'
cnt: 2, '((T([32, 64, 13, 13], th.float16), T([256, 64, 1, 1], th.float16), T([256], th.float16), [1, 1], [0, 0], [1, 1], False, [0, 0], 1), {})'
cnt: 2, '((T([32, 64, 13, 13], th.float16), T([256, 64, 3, 3], th.float16), T([256], th.float16), [1, 1], [1, 1], [1, 1], False, [0, 0], 1), {})'
cnt: 1, '((T([32, 512, 13, 13], th.float16), T([64, 512, 1, 1], th.float16), T([64], th.float16), [1, 1], [0, 0], [1, 1], False, [0, 0], 1), {})'
cnt: 1, '((T([32, 512, 13, 13], th.float16), T([1000, 512, 1, 1], th.float16), T([1000], th.float16), [1, 1], [0, 0], [1, 1], False, [0, 0], 1), {})'
Operator: aten.convolution_backward.default
cnt: 1, '((T([32, 1000, 13, 13], th.float16), T([32, 512, 13, 13], th.float16), T([1000, 512, 1, 1], th.float16), [1000], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, True]), {})'
cnt: 2, '((T([32, 256, 13, 13], th.float16), T([32, 64, 13, 13], th.float16), T([256, 64, 3, 3], th.float16), [256], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, True]), {})'
cnt: 2, '((T([32, 256, 13, 13], th.float16), T([32, 64, 13, 13], th.float16), T([256, 64, 1, 1], th.float16), [256], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, True]), {})'
cnt: 1, '((T([32, 64, 13, 13], th.float16), T([32, 512, 13, 13], th.float16), T([64, 512, 1, 1], th.float16), [64], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, True]), {})'
cnt: 1, '((T([32, 64, 13, 13], th.float16), T([32, 384, 13, 13], th.float16), T([64, 384, 1, 1], th.float16), [64], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, True]), {})'
cnt: 2, '((T([32, 192, 13, 13], th.float16), T([32, 48, 13, 13], th.float16), T([192, 48, 3, 3], th.float16), [192], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, True]), {})'
cnt: 2, '((T([32, 192, 13, 13], th.float16), T([32, 48, 13, 13], th.float16), T([192, 48, 1, 1], th.float16), [192], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, True]), {})'
cnt: 1, '((T([32, 48, 13, 13], th.float16), T([32, 384, 13, 13], th.float16), T([48, 384, 1, 1], th.float16), [48], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, True]), {})'
cnt: 1, '((T([32, 48, 13, 13], th.float16), T([32, 256, 13, 13], th.float16), T([48, 256, 1, 1], th.float16), [48], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, True]), {})'
cnt: 2, '((T([32, 128, 27, 27], th.float16), T([32, 32, 27, 27], th.float16), T([128, 32, 3, 3], th.float16), [128], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, True]), {})'
cnt: 2, '((T([32, 128, 27, 27], th.float16), T([32, 32, 27, 27], th.float16), T([128, 32, 1, 1], th.float16), [128], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, True]), {})'
cnt: 1, '((T([32, 32, 27, 27], th.float16), T([32, 256, 27, 27], th.float16), T([32, 256, 1, 1], th.float16), [32], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, True]), {})'
cnt: 1, '((T([32, 32, 27, 27], th.float16), T([32, 128, 27, 27], th.float16), T([32, 128, 1, 1], th.float16), [32], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, True]), {})'
cnt: 2, '((T([32, 64, 55, 55], th.float16), T([32, 16, 55, 55], th.float16), T([64, 16, 3, 3], th.float16), [64], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, True]), {})'
cnt: 2, '((T([32, 64, 55, 55], th.float16), T([32, 16, 55, 55], th.float16), T([64, 16, 1, 1], th.float16), [64], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, True]), {})'
cnt: 1, '((T([32, 16, 55, 55], th.float16), T([32, 128, 55, 55], th.float16), T([16, 128, 1, 1], th.float16), [16], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, True]), {})'
cnt: 1, '((T([32, 16, 55, 55], th.float16), T([32, 64, 55, 55], th.float16), T([16, 64, 1, 1], th.float16), [16], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, True]), {})'
cnt: 1, '((T([32, 64, 111, 111], th.float16), T([32, 3, 224, 224], th.float16), T([64, 3, 3, 3], th.float16), [64], [2, 2], [0, 0], [1, 1], False, [0, 0], 1, [False, True, True]), {})'
Operator: aten.copy_.default
cnt: 1, '((T([32, 3, 224, 224], th.float16), T([32, 3, 224, 224], th.float16)), {})'
Operator: aten.div.Scalar
cnt: 1, '((T([32, 1000, 13, 13], th.float16, (0, 0, 0, 0)), 169), {})'
Operator: aten.div.Tensor
cnt: 2, '((T([], th.float16), 32000), {})'
Operator: aten.max_pool2d_with_indices.default
cnt: 1, '((T([32, 64, 111, 111], th.float16), [3, 3], [2, 2], [0, 0], [1, 1], True), {})'
cnt: 1, '((T([32, 128, 55, 55], th.float16), [3, 3], [2, 2], [0, 0], [1, 1], True), {})'
cnt: 1, '((T([32, 256, 27, 27], th.float16), [3, 3], [2, 2], [0, 0], [1, 1], True), {})'
Operator: aten.max_pool2d_with_indices_backward.default
cnt: 1, '((T([32, 256, 13, 13], th.float16), T([32, 256, 27, 27], th.float16), [3, 3], [2, 2], [0, 0], [1, 1], True, T([32, 256, 13, 13], th.int64)), {})'
cnt: 1, '((T([32, 128, 27, 27], th.float16), T([32, 128, 55, 55], th.float16), [3, 3], [2, 2], [0, 0], [1, 1], True, T([32, 128, 27, 27], th.int64)), {})'
cnt: 1, '((T([32, 64, 55, 55], th.float16), T([32, 64, 111, 111], th.float16), [3, 3], [2, 2], [0, 0], [1, 1], True, T([32, 64, 55, 55], th.int64)), {})'
Operator: aten.mean.dim
cnt: 1, '((T([32, 1000, 13, 13], th.float16), [-1, -2], True), {})'
Operator: aten.relu_.default
cnt: 1, '((T([32, 64, 111, 111], th.float16),), {})'
cnt: 2, '((T([32, 16, 55, 55], th.float16),), {})'
cnt: 4, '((T([32, 64, 55, 55], th.float16),), {})'
cnt: 2, '((T([32, 32, 27, 27], th.float16),), {})'
cnt: 4, '((T([32, 128, 27, 27], th.float16),), {})'
cnt: 2, '((T([32, 48, 13, 13], th.float16),), {})'
cnt: 4, '((T([32, 192, 13, 13], th.float16),), {})'
cnt: 2, '((T([32, 64, 13, 13], th.float16),), {})'
cnt: 4, '((T([32, 256, 13, 13], th.float16),), {})'
cnt: 1, '((T([32, 1000, 13, 13], th.float16),), {})'
Operator: aten.sum.default
cnt: 1, '((T([32, 1000], th.float16),), {})'
Operator: aten.threshold_backward.default
cnt: 1, '((T([32, 1000, 13, 13], th.float16), T([32, 1000, 13, 13], th.float16), 0), {})'
cnt: 4, '((T([32, 256, 13, 13], th.float16, (86528, 169, 13, 1)), T([32, 256, 13, 13], th.float16), 0), {})'
cnt: 2, '((T([32, 64, 13, 13], th.float16), T([32, 64, 13, 13], th.float16), 0), {})'
cnt: 4, '((T([32, 192, 13, 13], th.float16, (64896, 169, 13, 1)), T([32, 192, 13, 13], th.float16), 0), {})'
cnt: 2, '((T([32, 48, 13, 13], th.float16), T([32, 48, 13, 13], th.float16), 0), {})'
cnt: 4, '((T([32, 128, 27, 27], th.float16, (186624, 729, 27, 1)), T([32, 128, 27, 27], th.float16), 0), {})'
cnt: 2, '((T([32, 32, 27, 27], th.float16), T([32, 32, 27, 27], th.float16), 0), {})'
cnt: 4, '((T([32, 64, 55, 55], th.float16, (387200, 3025, 55, 1)), T([32, 64, 55, 55], th.float16), 0), {})'
cnt: 2, '((T([32, 16, 55, 55], th.float16), T([32, 16, 55, 55], th.float16), 0), {})'
cnt: 1, '((T([32, 64, 111, 111], th.float16), T([32, 64, 111, 111], th.float16), 0), {})'
