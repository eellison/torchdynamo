Operator: aten.addmm.default
cnt: 1, '((T([5], th.float16), T([5, 64], th.float16), T([64, 5], th.float16, (1, 64))), {})'
Operator: aten.clone.default
cnt: 1, '((T([5, 1, 28, 28], th.float16),), {})'
Operator: aten.convolution.default
cnt: 1, '((T([5, 1, 28, 28], th.float16), T([64, 1, 3, 3], th.float16), T([64], th.float16), [1, 1], [0, 0], [1, 1], False, [0, 0], 1), {})'
cnt: 1, '((T([5, 64, 13, 13], th.float16, (10816, 1, 832, 64)), T([64, 64, 3, 3], th.float16), T([64], th.float16), [1, 1], [0, 0], [1, 1], False, [0, 0], 1), {})'
cnt: 1, '((T([5, 64, 5, 5], th.float16, (1600, 1, 320, 64)), T([64, 64, 3, 3], th.float16), T([64], th.float16), [1, 1], [0, 0], [1, 1], False, [0, 0], 1), {})'
Operator: aten.convolution_backward.default
cnt: 1, '((T([5, 64, 3, 3], th.float16, (576, 1, 192, 64)), T([5, 64, 5, 5], th.float16, (1600, 1, 320, 64)), T([64, 64, 3, 3], th.float16), [64], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, True]), {})'
cnt: 1, '((T([5, 64, 11, 11], th.float16, (7744, 1, 704, 64)), T([5, 64, 13, 13], th.float16, (10816, 1, 832, 64)), T([64, 64, 3, 3], th.float16), [64], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, True]), {})'
cnt: 1, '((T([5, 64, 26, 26], th.float16, (43264, 1, 1664, 64)), T([5, 1, 28, 28], th.float16), T([64, 1, 3, 3], th.float16), [64], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [False, True, True]), {})'
Operator: aten.copy_.default
cnt: 1, '((T([5, 1, 28, 28], th.float16), T([5, 1, 28, 28], th.float16)), {})'
cnt: 2, '((T([64, 64, 3, 3], th.float16), T([64, 64, 3, 3], th.float16, (576, 1, 192, 64))), {})'
Operator: aten.div.Tensor
cnt: 2, '((T([], th.float16), 25), {})'
Operator: aten.max_pool2d_with_indices.default
cnt: 1, '((T([5, 64, 26, 26], th.float16, (43264, 1, 1664, 64)), [2, 2], [2, 2]), {})'
cnt: 1, '((T([5, 64, 11, 11], th.float16, (7744, 1, 704, 64)), [2, 2], [2, 2]), {})'
cnt: 1, '((T([5, 64, 3, 3], th.float16, (576, 1, 192, 64)), [2, 2], [2, 2]), {})'
Operator: aten.max_pool2d_with_indices_backward.default
cnt: 1, '((T([5, 64, 1, 1], th.float16), T([5, 64, 3, 3], th.float16, (576, 1, 192, 64)), [2, 2], [2, 2], [0, 0], [1, 1], False, T([5, 64, 1, 1], th.int64)), {})'
cnt: 1, '((T([5, 64, 5, 5], th.float16, (1600, 1, 320, 64)), T([5, 64, 11, 11], th.float16, (7744, 1, 704, 64)), [2, 2], [2, 2], [0, 0], [1, 1], False, T([5, 64, 5, 5], th.int64, (1600, 1, 320, 64))), {})'
cnt: 1, '((T([5, 64, 13, 13], th.float16, (10816, 1, 832, 64)), T([5, 64, 26, 26], th.float16, (43264, 1, 1664, 64)), [2, 2], [2, 2], [0, 0], [1, 1], False, T([5, 64, 13, 13], th.int64, (10816, 1, 832, 64))), {})'
Operator: aten.mm.default
cnt: 2, '((T([5, 5], th.float16, (0, 0)), T([5, 64], th.float16)), {})'
Operator: aten.native_batch_norm.default
cnt: 1, '((T([5, 64, 26, 26], th.float16, (43264, 1, 1664, 64)), T([64], th.float16), T([64], th.float16), T([64], th.float16), T([64], th.float16), False, 1.0, 1e-05), {})'
cnt: 1, '((T([5, 64, 11, 11], th.float16, (7744, 1, 704, 64)), T([64], th.float16), T([64], th.float16), T([64], th.float16), T([64], th.float16), False, 1.0, 1e-05), {})'
cnt: 1, '((T([5, 64, 3, 3], th.float16, (576, 1, 192, 64)), T([64], th.float16), T([64], th.float16), T([64], th.float16), T([64], th.float16), False, 1.0, 1e-05), {})'
Operator: aten.native_batch_norm_backward.default
cnt: 1, '((T([5, 64, 3, 3], th.float16, (576, 1, 192, 64)), T([5, 64, 3, 3], th.float16, (576, 1, 192, 64)), T([64], th.float16), T([64], th.float16), T([64], th.float16), T([64], th.float32), T([64], th.float32), False, 1e-05, [True, True, True]), {})'
cnt: 1, '((T([5, 64, 11, 11], th.float16, (7744, 1, 704, 64)), T([5, 64, 11, 11], th.float16, (7744, 1, 704, 64)), T([64], th.float16), T([64], th.float16), T([64], th.float16), T([64], th.float32), T([64], th.float32), False, 1e-05, [True, True, True]), {})'
cnt: 1, '((T([5, 64, 26, 26], th.float16, (43264, 1, 1664, 64)), T([5, 64, 26, 26], th.float16, (43264, 1, 1664, 64)), T([64], th.float16), T([64], th.float16), T([64], th.float16), T([64], th.float32), T([64], th.float32), False, 1e-05, [True, True, True]), {})'
Operator: aten.new_empty_strided.default
cnt: 2, '((T([64, 64, 3, 3], th.float16, (576, 1, 192, 64)), [64, 64, 3, 3], [576, 9, 3, 1]), {\'device\': "th.device(\'cuda\')", \'dtype\': th.float16, \'layout\': th.strided})'
Operator: aten.relu_.default
cnt: 1, '((T([5, 64, 26, 26], th.float16, (43264, 1, 1664, 64)),), {})'
cnt: 1, '((T([5, 64, 11, 11], th.float16, (7744, 1, 704, 64)),), {})'
cnt: 1, '((T([5, 64, 3, 3], th.float16, (576, 1, 192, 64)),), {})'
Operator: aten.sum.SymInt
cnt: 1, '((T([5, 5], th.float16, (0, 0)), [0], True), {})'
Operator: aten.sum.default
cnt: 1, '((T([5, 5], th.float16),), {})'
Operator: aten.threshold_backward.default
cnt: 1, '((T([5, 64, 3, 3], th.float16, (576, 1, 192, 64)), T([5, 64, 3, 3], th.float16, (576, 1, 192, 64)), 0), {})'
cnt: 1, '((T([5, 64, 11, 11], th.float16, (7744, 1, 704, 64)), T([5, 64, 11, 11], th.float16, (7744, 1, 704, 64)), 0), {})'
cnt: 1, '((T([5, 64, 26, 26], th.float16, (43264, 1, 1664, 64)), T([5, 64, 26, 26], th.float16, (43264, 1, 1664, 64)), 0), {})'
