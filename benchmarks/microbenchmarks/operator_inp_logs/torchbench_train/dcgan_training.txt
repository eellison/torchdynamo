Operator: aten.clone.default
cnt: 1, '((T([32, 3, 64, 64], th.float16),), {})'
Operator: aten.convolution.default
cnt: 1, '((T([32, 3, 64, 64], th.float16), T([64, 3, 4, 4], th.float16), None, [2, 2], [1, 1], [1, 1], False, [0, 0], 1), {})'
cnt: 1, '((T([32, 64, 32, 32], th.float16), T([128, 64, 4, 4], th.float16), None, [2, 2], [1, 1], [1, 1], False, [0, 0], 1), {})'
cnt: 1, '((T([32, 128, 16, 16], th.float16), T([256, 128, 4, 4], th.float16), None, [2, 2], [1, 1], [1, 1], False, [0, 0], 1), {})'
cnt: 1, '((T([32, 256, 8, 8], th.float16), T([512, 256, 4, 4], th.float16), None, [2, 2], [1, 1], [1, 1], False, [0, 0], 1), {})'
cnt: 1, '((T([32, 512, 4, 4], th.float16), T([1, 512, 4, 4], th.float16), None, [1, 1], [0, 0], [1, 1], False, [0, 0], 1), {})'
Operator: aten.convolution_backward.default
cnt: 1, '((T([32, 1, 1, 1], th.float16), T([32, 512, 4, 4], th.float16), T([1, 512, 4, 4], th.float16), [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False]), {})'
cnt: 1, '((T([32, 512, 4, 4], th.float16), T([32, 256, 8, 8], th.float16), T([512, 256, 4, 4], th.float16), [0], [2, 2], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False]), {})'
cnt: 1, '((T([32, 256, 8, 8], th.float16), T([32, 128, 16, 16], th.float16), T([256, 128, 4, 4], th.float16), [0], [2, 2], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False]), {})'
cnt: 1, '((T([32, 128, 16, 16], th.float16), T([32, 64, 32, 32], th.float16), T([128, 64, 4, 4], th.float16), [0], [2, 2], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False]), {})'
cnt: 1, '((T([32, 64, 32, 32], th.float16), T([32, 3, 64, 64], th.float16), T([64, 3, 4, 4], th.float16), [0], [2, 2], [1, 1], [1, 1], False, [0, 0], 1, [False, True, False]), {})'
Operator: aten.copy_.default
cnt: 1, '((T([32, 3, 64, 64], th.float16), T([32, 3, 64, 64], th.float16)), {})'
Operator: aten.div.Tensor
cnt: 2, '((T([], th.float16), 32), {})'
Operator: aten.leaky_relu_.default
cnt: 1, '((T([32, 64, 32, 32], th.float16), 0.2), {})'
cnt: 1, '((T([32, 128, 16, 16], th.float16), 0.2), {})'
cnt: 1, '((T([32, 256, 8, 8], th.float16), 0.2), {})'
cnt: 1, '((T([32, 512, 4, 4], th.float16), 0.2), {})'
Operator: aten.leaky_relu_backward.default
cnt: 1, '((T([32, 512, 4, 4], th.float16), T([32, 512, 4, 4], th.float16), 0.2, True), {})'
cnt: 1, '((T([32, 256, 8, 8], th.float16), T([32, 256, 8, 8], th.float16), 0.2, True), {})'
cnt: 1, '((T([32, 128, 16, 16], th.float16), T([32, 128, 16, 16], th.float16), 0.2, True), {})'
cnt: 1, '((T([32, 64, 32, 32], th.float16), T([32, 64, 32, 32], th.float16), 0.2, True), {})'
Operator: aten.native_batch_norm.default
cnt: 1, '((T([32, 128, 16, 16], th.float16), T([128], th.float16), T([128], th.float16), T([128], th.float16), T([128], th.float16), False, 0.1, 1e-05), {})'
cnt: 1, '((T([32, 256, 8, 8], th.float16), T([256], th.float16), T([256], th.float16), T([256], th.float16), T([256], th.float16), False, 0.1, 1e-05), {})'
cnt: 1, '((T([32, 512, 4, 4], th.float16), T([512], th.float16), T([512], th.float16), T([512], th.float16), T([512], th.float16), False, 0.1, 1e-05), {})'
Operator: aten.native_batch_norm_backward.default
cnt: 1, '((T([32, 512, 4, 4], th.float16), T([32, 512, 4, 4], th.float16), T([512], th.float16), T([512], th.float16), T([512], th.float16), T([512], th.float32), T([512], th.float32), False, 1e-05, [True, True, True]), {})'
cnt: 1, '((T([32, 256, 8, 8], th.float16), T([32, 256, 8, 8], th.float16), T([256], th.float16), T([256], th.float16), T([256], th.float16), T([256], th.float32), T([256], th.float32), False, 1e-05, [True, True, True]), {})'
cnt: 1, '((T([32, 128, 16, 16], th.float16), T([32, 128, 16, 16], th.float16), T([128], th.float16), T([128], th.float16), T([128], th.float16), T([128], th.float32), T([128], th.float32), False, 1e-05, [True, True, True]), {})'
Operator: aten.sigmoid.default
cnt: 1, '((T([32, 1, 1, 1], th.float16),), {})'
Operator: aten.sigmoid_backward.default
cnt: 1, '((T([32, 1, 1, 1], th.float16, (0, 0, 0, 0)), T([32, 1, 1, 1], th.float16)), {})'
Operator: aten.sum.default
cnt: 1, '((T([32, 1, 1, 1], th.float16),), {})'
