Operator: aten._index_put_impl_.default
cnt: 1, '((T([6, 474, 768], th.float16), [T([6, 474], th.int64, (1, 0)), T([6, 474], th.int64, (475, 1))], T([6, 474, 768], th.float16), True, True), {})'
Operator: aten._softmax.default
cnt: 12, '((T([6, 12, 476, 476], th.float16), -1, False), {})'
Operator: aten._softmax_backward_data.default
cnt: 12, '((T([6, 12, 476, 476], th.float16), T([6, 12, 476, 476], th.float16), -1, th.float16), {})'
Operator: aten._to_copy.default
cnt: 1, '((T([6, 474], th.int64),), {\'device\': "th.device(\'cpu\')", \'dtype\': th.int64, \'layout\': th.strided})'
cnt: 1, '((T([6], th.int64),), {\'device\': "th.device(\'cuda\')", \'dtype\': th.int64})'
cnt: 1, "((T([6, 476], th.bool),), {'dtype': th.int64})"
cnt: 1, "((T([6, 1, 1, 476], th.int64),), {'dtype': th.float16})"
Operator: aten._unsafe_view.default
cnt: 36, '((T([6, 12, 476, 64], th.float16), [72, 476, 64]), {})'
cnt: 12, '((T([6, 12, 64, 476], th.float16), [72, 64, 476]), {})'
cnt: 12, '((T([72, 476, 476], th.float16), [6, 12, 476, 476]), {})'
cnt: 12, '((T([72, 476, 64], th.float16), [6, 12, 476, 64]), {})'
cnt: 24, '((T([6, 476, 12, 64], th.float16), [6, 476, 768]), {})'
cnt: 12, '((T([6, 476, 768], th.float16), [2856, 768]), {})'
Operator: aten.add.Tensor
cnt: 6, '((T([], th.int64), 1), {})'
cnt: 6, '((T([], th.int64), 2), {})'
cnt: 1, '((T([6], th.int64), 1), {})'
cnt: 74, '((T([6, 476, 768], th.float16), T([6, 476, 768], th.float16)), {})'
cnt: 12, '((T([6, 12, 476, 476], th.float16), T([6, 1, 1, 476], th.float16)), {})'
cnt: 12, '((T([6, 476, 3072], th.float16), 1.0), {})'
cnt: 1, '((T([], th.float16), 0), {})'
cnt: 1, '((T([], th.float16), T([], th.float16)), {})'
cnt: 1, '((T([6, 474, 2], th.float16), T([6, 474, 2], th.float16)), {})'
cnt: 12, '((T([6, 476, 3072], th.float16), T([6, 476, 3072], th.float16)), {})'
Operator: aten.addmm.default
cnt: 48, '((T([768], th.float16), T([2856, 768], th.float16), T([768, 768], th.float16, (1, 768))), {})'
cnt: 12, '((T([3072], th.float16), T([2856, 768], th.float16), T([768, 3072], th.float16, (1, 768))), {})'
cnt: 12, '((T([768], th.float16), T([2856, 3072], th.float16), T([3072, 768], th.float16, (1, 3072))), {})'
cnt: 1, '((T([768], th.float16), T([6, 768], th.float16, (365568, 1)), T([768, 768], th.float16, (1, 768))), {})'
cnt: 1, '((T([2], th.float16), T([2844, 768], th.float16), T([768, 2], th.float16, (1, 768))), {})'
Operator: aten.bitwise_xor.Tensor
cnt: 1, '((T([6, 1], th.int64, (476, 1)), T([6, 476], th.int64)), {})'
Operator: aten.bmm.default
cnt: 12, '((T([72, 476, 64], th.float16), T([72, 64, 476], th.float16)), {})'
cnt: 12, '((T([72, 476, 476], th.float16), T([72, 476, 64], th.float16)), {})'
cnt: 12, '((T([72, 476, 476], th.float16, (226576, 1, 476)), T([72, 476, 64], th.float16)), {})'
cnt: 12, '((T([72, 476, 64], th.float16), T([72, 64, 476], th.float16, (30464, 1, 64))), {})'
cnt: 12, '((T([72, 64, 476], th.float16, (30464, 1, 64)), T([72, 476, 476], th.float16)), {})'
cnt: 12, '((T([72, 476, 476], th.float16), T([72, 476, 64], th.float16, (30464, 1, 476))), {})'
Operator: aten.cat.default
cnt: 1, '(([T([6, 474, 768], th.float16)], -1), {})'
Operator: aten.clone.default
cnt: 1, '((T([6, 474], th.int64),), {})'
Operator: aten.copy_.default
cnt: 1, '((T([6, 474], th.int64), T([6, 474], th.int64)), {})'
cnt: 6, '((T([474], th.int64), T([474], th.int64)), {})'
cnt: 1, '((T([6, 474], th.int64, (475, 1)), T([6, 474], th.int64)), {})'
cnt: 1, '((T([6, 474, 768], th.float16), T([6, 474, 768], th.float16)), {})'
cnt: 1, '((T([1, 6, 474, 768], th.float16), T([1, 6, 474, 768], th.float16)), {})'
Operator: aten.cumsum.default
cnt: 1, '((T([6, 476], th.int64), -1), {})'
cnt: 1, '((T([6, 474], th.int64), -1), {})'
Operator: aten.div.Tensor
cnt: 24, '((T([6, 12, 476, 476], th.float16), 8.0), {})'
cnt: 24, '((T([6, 476, 3072], th.float16), 1.4142135623730951), {})'
cnt: 4, '((T([], th.float16), 2844), {})'
cnt: 2, '((T([], th.float16), 2), {})'
Operator: aten.embedding.default
cnt: 1, '((T([21128, 768], th.float16), T([6, 476], th.int64), 0), {})'
cnt: 1, '((T([512, 768], th.float16), T([6, 476], th.int64, (0, 1))), {})'
cnt: 1, '((T([2, 768], th.float16), T([6, 476], th.int64)), {})'
Operator: aten.embedding_dense_backward.default
cnt: 1, '((T([6, 476, 768], th.float16), T([6, 476], th.int64), 2, -1, False), {})'
cnt: 1, '((T([6, 476, 768], th.float16), T([6, 476], th.int64, (0, 1)), 512, -1, False), {})'
cnt: 1, '((T([6, 476, 768], th.float16), T([6, 476], th.int64), 21128, 0, False), {})'
Operator: aten.eq.Scalar
cnt: 1, '((T([6, 474], th.bool), False), {})'
cnt: 1, '((T([6, 476], th.int64), 2260), {})'
cnt: 1, '((T([6, 474, 1], th.bool), False), {})'
Operator: aten.erf.default
cnt: 12, '((T([6, 476, 3072], th.float16),), {})'
Operator: aten.exp.default
cnt: 12, '((T([6, 476, 3072], th.float16),), {})'
Operator: aten.fill_.Scalar
cnt: 6, '((T([476], th.int64), 1), {})'
cnt: 1, '((T([6], th.int64, (476,)), 1463), {})'
Operator: aten.flip.default
cnt: 2, '((T([6, 476], th.int64), [-1]), {})'
Operator: aten.fmod.Scalar
cnt: 1, '((T([6, 476], th.int64), 2), {})'
Operator: aten.ge.Scalar
cnt: 1, '((T([6, 474], th.int64, (475, 1)), 474), {})'
Operator: aten.index.Tensor
cnt: 1, '((T([2869], th.int64), [T([6, 474], th.int64)]), {})'
cnt: 1, '((T([6, 474, 768], th.float16, (365568, 768, 1)), [T([6, 474], th.int64, (1, 0)), T([6, 474], th.int64, (475, 1))]), {})'
Operator: aten.index_put_.default
cnt: 1, '((T([6, 476], th.int64), [T([6], th.int64), T([6], th.int64)], T([], th.int64)), {})'
Operator: aten.masked_fill.Scalar
cnt: 1, '((T([6, 474], th.int64), T([6, 474], th.bool), 0), {})'
cnt: 2, '((T([6, 474, 768], th.float16), T([6, 474, 1], th.bool), 0), {})'
Operator: aten.masked_fill_.Scalar
cnt: 1, '((T([6, 474], th.int64, (475, 1)), T([6, 474], th.bool), 0), {})'
Operator: aten.max.default
cnt: 2, '((T([6], th.int64),), {})'
Operator: aten.mm.default
cnt: 1, '((T([2844, 2], th.float16), T([2, 768], th.float16)), {})'
cnt: 1, '((T([2, 2844], th.float16, (1, 2)), T([2844, 768], th.float16)), {})'
cnt: 12, '((T([2856, 768], th.float16), T([768, 3072], th.float16)), {})'
cnt: 12, '((T([768, 2856], th.float16, (1, 768)), T([2856, 3072], th.float16)), {})'
cnt: 12, '((T([2856, 3072], th.float16), T([3072, 768], th.float16)), {})'
cnt: 12, '((T([3072, 2856], th.float16, (1, 3072)), T([2856, 768], th.float16)), {})'
cnt: 48, '((T([2856, 768], th.float16), T([768, 768], th.float16)), {})'
cnt: 48, '((T([768, 2856], th.float16, (1, 768)), T([2856, 768], th.float16)), {})'
Operator: aten.mul.Scalar
cnt: 12, '((T([6, 476, 3072], th.float16), 1.1283791670955126), {})'
Operator: aten.mul.Tensor
cnt: 1, '((T([6, 1, 1, 476], th.float16), -10000.0), {})'
cnt: 24, '((T([6, 476, 3072], th.float16), 0.5), {})'
cnt: 48, '((T([6, 476, 3072], th.float16), T([6, 476, 3072], th.float16)), {})'
Operator: aten.native_layer_norm.default
cnt: 25, '((T([6, 476, 768], th.float16), [768], T([768], th.float16), T([768], th.float16), 1e-12), {})'
Operator: aten.native_layer_norm_backward.default
cnt: 25, '((T([6, 476, 768], th.float16), T([6, 476, 768], th.float16), [768], T([6, 476, 1], th.float32), T([6, 476, 1], th.float32), T([768], th.float16), T([768], th.float16), [True, True, True]), {})'
Operator: aten.ne.Scalar
cnt: 1, '((T([6, 474], th.int64), 0), {})'
Operator: aten.neg.default
cnt: 12, '((T([6, 476, 3072], th.float16),), {})'
Operator: aten.new_empty_strided.default
cnt: 1, '((T([1, 6, 474, 768], th.float16), [1, 6, 474, 768], [2184192, 364032, 768, 1]), {})'
Operator: aten.new_full.default
cnt: 1, '((T([6, 474], th.int64), [6, 476], 624), {\'device\': "th.device(\'cuda\')", \'dtype\': th.int64, \'layout\': th.strided, \'pin_memory\': False})'
Operator: aten.new_zeros.default
cnt: 1, '((T([6, 476, 768], th.float16), [1, 6, 474, 768]), {\'device\': "th.device(\'cuda\')", \'dtype\': th.float16, \'layout\': th.strided, \'pin_memory\': False})'
cnt: 1, '((T([6, 474], th.int64), [6, 475]), {\'device\': "th.device(\'cuda\')", \'dtype\': th.int64, \'layout\': th.strided, \'pin_memory\': False})'
cnt: 1, '((T([6, 474, 768], th.float16), [6, 474, 768]), {\'device\': "th.device(\'cuda\')", \'dtype\': th.float16, \'layout\': th.strided})'
Operator: aten.pow.Tensor_Scalar
cnt: 12, '((T([6, 476, 3072], th.float16), 2), {})'
Operator: aten.rsub.Scalar
cnt: 1, '((T([6, 1, 1, 476], th.float16), 1.0), {})'
Operator: aten.select_backward.default
cnt: 1, '((T([6, 474], th.float16, (0, 0)), [6, 474, 2], 2, 1), {})'
cnt: 1, '((T([6, 474], th.float16, (0, 0)), [6, 474, 2], 2, 0), {})'
Operator: aten.slice_backward.default
cnt: 2, '((T([6, 474, 2], th.float16), [6, 474, 2], 1, 0, 9223372036854775807, 1), {})'
cnt: 2, '((T([6, 474, 2], th.float16), [6, 474, 2], 0, 0, 9223372036854775807, 1), {})'
cnt: 1, '((T([6, 474, 768], th.float16), [6, 476, 768], 1, 1, -1, 1), {})'
cnt: 1, '((T([6, 476, 768], th.float16), [6, 476, 768], 0, 0, 9223372036854775807, 1), {})'
Operator: aten.stack.default
cnt: 1, '(([T([6, 474, 768], th.float16)],), {})'
Operator: aten.sum.SymInt
cnt: 1, '((T([2844, 2], th.float16), [0], True), {})'
cnt: 60, '((T([2856, 768], th.float16), [0], True), {})'
cnt: 12, '((T([2856, 3072], th.float16), [0], True), {})'
Operator: aten.sum.default
cnt: 2, '((T([6, 474], th.float16, (948, 2)),), {})'
Operator: aten.sum.dim_IntList
cnt: 1, '((T([6, 474], th.bool), [-1]), {})'
cnt: 2, '((T([6, 474], th.int64), [-1]), {})'
Operator: aten.tanh.default
cnt: 1, '((T([6, 768], th.float16),), {})'
Operator: aten.unbind.int
cnt: 1, '((T([1, 6, 474, 768], th.float16),), {})'
