Operator: aten.add.Tensor
cnt: 27, '((T([3, 256, 128, 128], th.float16), T([3, 256, 128, 128], th.float16)), {})'
cnt: 1, '((T([], th.float16), 0), {})'
cnt: 1, '((T([], th.float16), T([], th.float16)), {})'
cnt: 1, '((T([3, 256, 128, 128], th.float16, (7340032, 16384, 128, 1)), T([3, 256, 128, 128], th.float16, (8388608, 16384, 128, 1))), {})'
cnt: 2, '((T([3, 256, 128, 128], th.float16), T([3, 256, 128, 128], th.float16, (8388608, 16384, 128, 1))), {})'
cnt: 1, '((T([3, 256, 128, 128], th.float16, (8388608, 16384, 128, 1)), T([3, 256, 128, 128], th.float16, (8388608, 16384, 128, 1))), {})'
cnt: 1, '((T([3, 128, 256, 256], th.float16, (16777216, 65536, 256, 1)), T([3, 128, 256, 256], th.float16)), {})'
Operator: aten.cat.default
cnt: 2, '(([T([3, 256, 128, 128], th.float16), T([3, 256, 128, 128], th.float16)], 1), {})'
cnt: 1, '(([T([3, 256, 128, 128], th.float16), T([3, 256, 128, 128], th.float16, (4194304, 1, 32768, 256))], 1), {})'
cnt: 1, '(([T([3, 64, 128, 128], th.float16), T([3, 64, 128, 128], th.float16), T([3, 64, 128, 128], th.float16)], 1), {})'
cnt: 1, '(([T([3, 256, 128, 128], th.float16), T([3, 192, 128, 128], th.float16)], 1), {})'
cnt: 1, '(([T([3, 128, 256, 256], th.float16), T([3, 128, 256, 256], th.float16)], 1), {})'
Operator: aten.clone.default
cnt: 2, '((T([3, 3, 512, 512], th.float16),), {})'
cnt: 1, '((T([3, 1, 512, 512], th.float16),), {})'
cnt: 1, '((T([3, 4, 512, 512], th.float16),), {})'
Operator: aten.convolution.default
cnt: 2, '((T([3, 3, 518, 518], th.float16), T([64, 3, 7, 7], th.float16), T([64], th.float16), [1, 1], [0, 0], [1, 1], False, [0, 0], 1), {})'
cnt: 3, '((T([3, 64, 512, 512], th.float16), T([128, 64, 3, 3], th.float16), T([128], th.float16), [2, 2], [1, 1], [1, 1], False, [0, 0], 1), {})'
cnt: 3, '((T([3, 128, 256, 256], th.float16), T([256, 128, 3, 3], th.float16), T([256], th.float16), [2, 2], [1, 1], [1, 1], False, [0, 0], 1), {})'
cnt: 1, '((T([3, 1, 518, 518], th.float16), T([64, 1, 7, 7], th.float16), T([64], th.float16), [1, 1], [0, 0], [1, 1], False, [0, 0], 1), {})'
cnt: 1, '((T([3, 64, 512, 512], th.float16, (16777216, 1, 32768, 64)), T([128, 64, 3, 3], th.float16), T([128], th.float16), [2, 2], [1, 1], [1, 1], False, [0, 0], 1), {})'
cnt: 1, '((T([3, 128, 256, 256], th.float16, (8388608, 1, 32768, 128)), T([256, 128, 3, 3], th.float16), T([256], th.float16), [2, 2], [1, 1], [1, 1], False, [0, 0], 1), {})'
cnt: 1, '((T([3, 4, 518, 518], th.float16), T([64, 4, 7, 7], th.float16), T([64], th.float16), [1, 1], [0, 0], [1, 1], False, [0, 0], 1), {})'
cnt: 3, '((T([3, 512, 128, 128], th.float16), T([64, 512, 1, 1], th.float16), None, [1, 1], [0, 0], [1, 1], False, [0, 0], 1), {})'
cnt: 1, '((T([3, 448, 128, 128], th.float16), T([256, 448, 1, 1], th.float16), None, [1, 1], [0, 0], [1, 1], False, [0, 0], 1), {})'
cnt: 26, '((T([3, 256, 130, 130], th.float16), T([256, 256, 3, 3], th.float16), T([256], th.float16), [1, 1], [0, 0], [1, 1], False, [0, 0], 1), {})'
cnt: 2, '((T([3, 256, 256, 256], th.float16), T([128, 256, 3, 3], th.float16), T([128], th.float16), [1, 1], [1, 1], [1, 1], False, [0, 0], 1), {})'
cnt: 1, '((T([3, 128, 512, 512], th.float16), T([64, 128, 3, 3], th.float16), T([64], th.float16), [1, 1], [1, 1], [1, 1], False, [0, 0], 1), {})'
cnt: 1, '((T([3, 64, 518, 518], th.float16), T([1, 64, 7, 7], th.float16), T([1], th.float16), [1, 1], [0, 0], [1, 1], False, [0, 0], 1), {})'
cnt: 1, '((T([3, 256, 512, 512], th.float16), T([64, 256, 3, 3], th.float16), T([64], th.float16), [1, 1], [1, 1], [1, 1], False, [0, 0], 1), {})'
cnt: 1, '((T([3, 64, 518, 518], th.float16), T([3, 64, 7, 7], th.float16), T([3], th.float16), [1, 1], [0, 0], [1, 1], False, [0, 0], 1), {})'
Operator: aten.convolution_backward.default
cnt: 1, '((T([3, 3, 512, 512], th.float16, (0, 0, 0, 0)), T([3, 64, 518, 518], th.float16), T([3, 64, 7, 7], th.float16), [3], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, True]), {})'
cnt: 1, '((T([3, 64, 512, 512], th.float16), T([3, 256, 512, 512], th.float16), T([64, 256, 3, 3], th.float16), [64], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, True]), {})'
cnt: 2, '((T([3, 128, 256, 256], th.float16), T([3, 256, 256, 256], th.float16), T([128, 256, 3, 3], th.float16), [128], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, True]), {})'
cnt: 26, '((T([3, 256, 128, 128], th.float16), T([3, 256, 130, 130], th.float16), T([256, 256, 3, 3], th.float16), [256], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, True]), {})'
cnt: 1, '((T([3, 1, 512, 512], th.float16), T([3, 64, 518, 518], th.float16), T([1, 64, 7, 7], th.float16), [1], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, True]), {})'
cnt: 1, '((T([3, 64, 512, 512], th.float16), T([3, 128, 512, 512], th.float16), T([64, 128, 3, 3], th.float16), [64], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, True]), {})'
cnt: 1, '((T([3, 256, 128, 128], th.float16), T([3, 448, 128, 128], th.float16), T([256, 448, 1, 1], th.float16), [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False]), {})'
cnt: 3, '((T([3, 64, 128, 128], th.float16), T([3, 512, 128, 128], th.float16), T([64, 512, 1, 1], th.float16), [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False]), {})'
cnt: 1, '((T([3, 256, 128, 128], th.float16, (4194304, 1, 32768, 256)), T([3, 128, 256, 256], th.float16, (8388608, 1, 32768, 128)), T([256, 128, 3, 3], th.float16), [256], [2, 2], [1, 1], [1, 1], False, [0, 0], 1, [True, True, True]), {})'
cnt: 1, '((T([3, 128, 256, 256], th.float16, (8388608, 1, 32768, 128)), T([3, 64, 512, 512], th.float16, (16777216, 1, 32768, 64)), T([128, 64, 3, 3], th.float16), [128], [2, 2], [1, 1], [1, 1], False, [0, 0], 1, [True, True, True]), {})'
cnt: 1, '((T([3, 64, 512, 512], th.float16, (16777216, 1, 32768, 64)), T([3, 1, 518, 518], th.float16), T([64, 1, 7, 7], th.float16), [64], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [False, True, True]), {})'
cnt: 2, '((T([3, 256, 128, 128], th.float16), T([3, 128, 256, 256], th.float16), T([256, 128, 3, 3], th.float16), [256], [2, 2], [1, 1], [1, 1], False, [0, 0], 1, [True, True, True]), {})'
cnt: 2, '((T([3, 128, 256, 256], th.float16), T([3, 64, 512, 512], th.float16), T([128, 64, 3, 3], th.float16), [128], [2, 2], [1, 1], [1, 1], False, [0, 0], 1, [True, True, True]), {})'
cnt: 2, '((T([3, 64, 512, 512], th.float16), T([3, 3, 518, 518], th.float16), T([64, 3, 7, 7], th.float16), [64], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [False, True, True]), {})'
Operator: aten.copy_.default
cnt: 2, '((T([3, 3, 512, 512], th.float16), T([3, 3, 512, 512], th.float16)), {})'
cnt: 1, '((T([3, 1, 512, 512], th.float16), T([3, 1, 512, 512], th.float16)), {})'
cnt: 1, '((T([3, 4, 512, 512], th.float16), T([3, 4, 512, 512], th.float16)), {})'
cnt: 1, '((T([256, 128, 3, 3], th.float16), T([256, 128, 3, 3], th.float16, (1152, 1, 384, 128))), {})'
cnt: 1, '((T([128, 64, 3, 3], th.float16), T([128, 64, 3, 3], th.float16, (576, 1, 192, 64))), {})'
Operator: aten.div.Tensor
cnt: 2, '((T([], th.float16), 786432), {})'
cnt: 2, '((T([], th.float16), 2359296), {})'
cnt: 2, '((T([], th.float16), 2), {})'
Operator: aten.native_batch_norm.default
cnt: 5, '((T([3, 64, 512, 512], th.float16), T([64], th.float16), T([64], th.float16), T([64], th.float16), T([64], th.float16), False, 0.1, 1e-05), {})'
cnt: 5, '((T([3, 128, 256, 256], th.float16), T([128], th.float16), T([128], th.float16), T([128], th.float16), T([128], th.float16), False, 0.1, 1e-05), {})'
cnt: 30, '((T([3, 256, 128, 128], th.float16), T([256], th.float16), T([256], th.float16), T([256], th.float16), T([256], th.float16), False, 0.1, 1e-05), {})'
cnt: 1, '((T([3, 64, 512, 512], th.float16, (16777216, 1, 32768, 64)), T([64], th.float16), T([64], th.float16), T([64], th.float16), T([64], th.float16), False, 0.1, 1e-05), {})'
cnt: 1, '((T([3, 128, 256, 256], th.float16, (8388608, 1, 32768, 128)), T([128], th.float16), T([128], th.float16), T([128], th.float16), T([128], th.float16), False, 0.1, 1e-05), {})'
cnt: 1, '((T([3, 256, 128, 128], th.float16, (4194304, 1, 32768, 256)), T([256], th.float16), T([256], th.float16), T([256], th.float16), T([256], th.float16), False, 0.1, 1e-05), {})'
cnt: 3, '((T([3, 64, 128, 128], th.float16), T([64], th.float16), T([64], th.float16), T([64], th.float16), T([64], th.float16), False, 0.1, 1e-05), {})'
Operator: aten.native_batch_norm_backward.default
cnt: 4, '((T([3, 64, 512, 512], th.float16), T([3, 64, 512, 512], th.float16), T([64], th.float16), T([64], th.float16), T([64], th.float16), T([64], th.float32), T([64], th.float32), False, 1e-05, [True, True, True]), {})'
cnt: 4, '((T([3, 128, 256, 256], th.float16), T([3, 128, 256, 256], th.float16), T([128], th.float16), T([128], th.float16), T([128], th.float16), T([128], th.float32), T([128], th.float32), False, 1e-05, [True, True, True]), {})'
cnt: 29, '((T([3, 256, 128, 128], th.float16), T([3, 256, 128, 128], th.float16), T([256], th.float16), T([256], th.float16), T([256], th.float16), T([256], th.float32), T([256], th.float32), False, 1e-05, [True, True, True]), {})'
cnt: 3, '((T([3, 64, 128, 128], th.float16), T([3, 64, 128, 128], th.float16), T([64], th.float16), T([64], th.float16), T([64], th.float16), T([64], th.float32), T([64], th.float32), False, 1e-05, [True, True, True]), {})'
cnt: 1, '((T([3, 256, 128, 128], th.float16, (4194304, 1, 32768, 256)), T([3, 256, 128, 128], th.float16, (4194304, 1, 32768, 256)), T([256], th.float16), T([256], th.float16), T([256], th.float16), T([256], th.float32), T([256], th.float32), False, 1e-05, [True, True, True]), {})'
cnt: 1, '((T([3, 128, 256, 256], th.float16, (8388608, 1, 32768, 128)), T([3, 128, 256, 256], th.float16, (8388608, 1, 32768, 128)), T([128], th.float16), T([128], th.float16), T([128], th.float16), T([128], th.float32), T([128], th.float32), False, 1e-05, [True, True, True]), {})'
cnt: 1, '((T([3, 64, 512, 512], th.float16, (16777216, 1, 32768, 64)), T([3, 64, 512, 512], th.float16, (16777216, 1, 32768, 64)), T([64], th.float16), T([64], th.float16), T([64], th.float16), T([64], th.float32), T([64], th.float32), False, 1e-05, [True, True, True]), {})'
Operator: aten.new_empty_strided.default
cnt: 1, '((T([256, 128, 3, 3], th.float16, (1152, 1, 384, 128)), [256, 128, 3, 3], [1152, 9, 3, 1]), {\'device\': "th.device(\'cuda\')", \'dtype\': th.float16, \'layout\': th.strided})'
cnt: 1, '((T([128, 64, 3, 3], th.float16, (576, 1, 192, 64)), [128, 64, 3, 3], [576, 9, 3, 1]), {\'device\': "th.device(\'cuda\')", \'dtype\': th.float16, \'layout\': th.strided})'
Operator: aten.reflection_pad2d.default
cnt: 2, '((T([3, 3, 512, 512], th.float16), [3, 3, 3, 3]), {})'
cnt: 1, '((T([3, 1, 512, 512], th.float16), [3, 3, 3, 3]), {})'
cnt: 1, '((T([3, 4, 512, 512], th.float16), [3, 3, 3, 3]), {})'
cnt: 26, '((T([3, 256, 128, 128], th.float16), [1, 1, 1, 1]), {})'
cnt: 2, '((T([3, 64, 512, 512], th.float16), [3, 3, 3, 3]), {})'
Operator: aten.reflection_pad2d_backward.default
cnt: 2, '((T([3, 64, 518, 518], th.float16), T([3, 64, 512, 512], th.float16), [3, 3, 3, 3]), {})'
cnt: 26, '((T([3, 256, 130, 130], th.float16), T([3, 256, 128, 128], th.float16), [1, 1, 1, 1]), {})'
Operator: aten.relu_.default
cnt: 5, '((T([3, 64, 512, 512], th.float16),), {})'
cnt: 5, '((T([3, 128, 256, 256], th.float16),), {})'
cnt: 17, '((T([3, 256, 128, 128], th.float16),), {})'
cnt: 1, '((T([3, 64, 512, 512], th.float16, (16777216, 1, 32768, 64)),), {})'
cnt: 1, '((T([3, 128, 256, 256], th.float16, (8388608, 1, 32768, 128)),), {})'
cnt: 1, '((T([3, 256, 128, 128], th.float16, (4194304, 1, 32768, 256)),), {})'
cnt: 3, '((T([3, 64, 128, 128], th.float16),), {})'
Operator: aten.sum.default
cnt: 1, '((T([3, 1, 512, 512], th.float16),), {})'
cnt: 1, '((T([3, 3, 512, 512], th.float16),), {})'
Operator: aten.tanh.default
cnt: 1, '((T([3, 1, 512, 512], th.float16),), {})'
Operator: aten.tanh_backward.default
cnt: 1, '((T([3, 1, 512, 512], th.float16, (0, 0, 0, 0)), T([3, 1, 512, 512], th.float16)), {})'
Operator: aten.threshold_backward.default
cnt: 4, '((T([3, 64, 512, 512], th.float16), T([3, 64, 512, 512], th.float16), 0), {})'
cnt: 1, '((T([3, 128, 256, 256], th.float16, (16777216, 65536, 256, 1)), T([3, 128, 256, 256], th.float16), 0), {})'
cnt: 16, '((T([3, 256, 128, 128], th.float16), T([3, 256, 128, 128], th.float16), 0), {})'
cnt: 3, '((T([3, 128, 256, 256], th.float16), T([3, 128, 256, 256], th.float16), 0), {})'
cnt: 3, '((T([3, 64, 128, 128], th.float16, (7340032, 16384, 128, 1)), T([3, 64, 128, 128], th.float16), 0), {})'
cnt: 1, '((T([3, 256, 128, 128], th.float16, (8388608, 16384, 128, 1)), T([3, 256, 128, 128], th.float16, (4194304, 1, 32768, 256)), 0), {})'
cnt: 1, '((T([3, 128, 256, 256], th.float16, (8388608, 1, 32768, 128)), T([3, 128, 256, 256], th.float16, (8388608, 1, 32768, 128)), 0), {})'
cnt: 1, '((T([3, 64, 512, 512], th.float16, (16777216, 1, 32768, 64)), T([3, 64, 512, 512], th.float16, (16777216, 1, 32768, 64)), 0), {})'
Operator: aten.upsample_bilinear2d.vec
cnt: 2, '((T([3, 256, 128, 128], th.float16), None, True, [2.0, 2.0]), {})'
cnt: 1, '((T([3, 128, 256, 256], th.float16), None, True, [2.0, 2.0]), {})'
cnt: 1, '((T([3, 256, 256, 256], th.float16), None, True, [2.0, 2.0]), {})'
Operator: aten.upsample_bilinear2d_backward.vec
cnt: 1, '((T([3, 256, 512, 512], th.float16), None, [3, 256, 256, 256], True, [2.0, 2.0]), {})'
cnt: 2, '((T([3, 256, 256, 256], th.float16), None, [3, 256, 128, 128], True, [2.0, 2.0]), {})'
cnt: 1, '((T([3, 128, 512, 512], th.float16), None, [3, 128, 256, 256], True, [2.0, 2.0]), {})'
