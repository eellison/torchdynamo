Operator: aten._index_put_impl_.default
cnt: 4, '((T([12, 16], th.float16), [None, T([16, 16], th.int64)], T([12, 16, 16], th.float16), True, True), {})'
cnt: 1, '((T([16, 49], th.float16), [None, T([16, 49], th.int64)], T([16, 16, 49], th.float16), True, True), {})'
cnt: 4, '((T([8, 49], th.float16), [None, T([49, 49], th.int64)], T([8, 49, 49], th.float16), True, True), {})'
cnt: 1, '((T([8, 196], th.float16), [None, T([49, 196], th.int64)], T([8, 49, 196], th.float16), True, True), {})'
cnt: 4, '((T([4, 196], th.float16), [None, T([196, 196], th.int64)], T([4, 196, 196], th.float16), True, True), {})'
Operator: aten._log_softmax.default
cnt: 1, '((T([128, 1000], th.float16), 1, False), {})'
Operator: aten._log_softmax_backward_data.default
cnt: 1, '((T([128, 1000], th.float16), T([128, 1000], th.float16), 1, th.float16), {})'
Operator: aten._softmax.default
cnt: 4, '((T([128, 4, 196, 196], th.float16), -1, False), {})'
cnt: 1, '((T([128, 8, 49, 196], th.float16), -1, False), {})'
cnt: 4, '((T([128, 8, 49, 49], th.float16), -1, False), {})'
cnt: 1, '((T([128, 16, 16, 49], th.float16), -1, False), {})'
cnt: 4, '((T([128, 12, 16, 16], th.float16), -1, False), {})'
Operator: aten._softmax_backward_data.default
cnt: 4, '((T([128, 12, 16, 16], th.float16), T([128, 12, 16, 16], th.float16), -1, th.float16), {})'
cnt: 1, '((T([128, 16, 16, 49], th.float16), T([128, 16, 16, 49], th.float16), -1, th.float16), {})'
cnt: 4, '((T([128, 8, 49, 49], th.float16), T([128, 8, 49, 49], th.float16), -1, th.float16), {})'
cnt: 1, '((T([128, 8, 49, 196], th.float16), T([128, 8, 49, 196], th.float16), -1, th.float16), {})'
cnt: 4, '((T([128, 4, 196, 196], th.float16), T([128, 4, 196, 196], th.float16), -1, th.float16), {})'
Operator: aten._unsafe_view.default
cnt: 8, '((T([128, 196, 256], th.float16), [128, 196, 256]), {})'
cnt: 4, '((T([128, 4, 196, 16], th.float16), [512, 196, 16]), {})'
cnt: 4, '((T([128, 4, 16, 196], th.float16), [512, 16, 196]), {})'
cnt: 4, '((T([512, 196, 196], th.float16), [128, 4, 196, 196]), {})'
cnt: 8, '((T([128, 4, 196, 32], th.float16), [512, 196, 32]), {})'
cnt: 4, '((T([512, 196, 32], th.float16), [128, 4, 196, 32]), {})'
cnt: 4, '((T([128, 196, 4, 32], th.float16), [128, 196, 128]), {})'
cnt: 8, '((T([25088, 128], th.float16), [128, 196, 128]), {})'
cnt: 1, '((T([128, 196, 640], th.float16), [128, 196, 640]), {})'
cnt: 1, '((T([128, 7, 7, 128], th.float16), [128, 49, 128]), {})'
cnt: 1, '((T([6272, 128], th.float16), [128, 49, 128]), {})'
cnt: 5, '((T([128, 8, 49, 16], th.float16), [1024, 49, 16]), {})'
cnt: 1, '((T([128, 8, 16, 196], th.float16), [1024, 16, 196]), {})'
cnt: 1, '((T([1024, 49, 196], th.float16), [128, 8, 49, 196]), {})'
cnt: 1, '((T([128, 8, 196, 64], th.float16), [1024, 196, 64]), {})'
cnt: 1, '((T([1024, 49, 64], th.float16), [128, 8, 49, 64]), {})'
cnt: 1, '((T([128, 49, 8, 64], th.float16), [128, 49, 512]), {})'
cnt: 10, '((T([6272, 256], th.float16), [128, 49, 256]), {})'
cnt: 9, '((T([6272, 512], th.float16), [128, 49, 512]), {})'
cnt: 4, '((T([128, 8, 16, 49], th.float16), [1024, 16, 49]), {})'
cnt: 4, '((T([1024, 49, 49], th.float16), [128, 8, 49, 49]), {})'
cnt: 8, '((T([128, 8, 49, 32], th.float16), [1024, 49, 32]), {})'
cnt: 4, '((T([1024, 49, 32], th.float16), [128, 8, 49, 32]), {})'
cnt: 4, '((T([128, 49, 8, 32], th.float16), [128, 49, 256]), {})'
cnt: 1, '((T([6272, 1280], th.float16), [128, 49, 1280]), {})'
cnt: 1, '((T([128, 4, 4, 256], th.float16), [128, 16, 256]), {})'
cnt: 1, '((T([2048, 256], th.float16), [128, 16, 256]), {})'
cnt: 1, '((T([128, 16, 16, 16], th.float16), [2048, 16, 16]), {})'
cnt: 1, '((T([128, 16, 16, 49], th.float16), [2048, 16, 49]), {})'
cnt: 1, '((T([2048, 16, 49], th.float16), [128, 16, 16, 49]), {})'
cnt: 1, '((T([128, 16, 49, 64], th.float16), [2048, 49, 64]), {})'
cnt: 1, '((T([2048, 16, 64], th.float16), [128, 16, 16, 64]), {})'
cnt: 1, '((T([128, 16, 16, 64], th.float16), [128, 16, 1024]), {})'
cnt: 10, '((T([2048, 384], th.float16), [128, 16, 384]), {})'
cnt: 9, '((T([2048, 768], th.float16), [128, 16, 768]), {})'
cnt: 8, '((T([128, 12, 16, 16], th.float16), [1536, 16, 16]), {})'
cnt: 4, '((T([1536, 16, 16], th.float16), [128, 12, 16, 16]), {})'
cnt: 8, '((T([128, 12, 16, 32], th.float16), [1536, 16, 32]), {})'
cnt: 4, '((T([1536, 16, 32], th.float16), [128, 12, 16, 32]), {})'
cnt: 4, '((T([128, 16, 12, 32], th.float16), [128, 16, 384]), {})'
cnt: 1, '((T([128, 16, 16, 64], th.float16), [2048, 16, 64]), {})'
cnt: 1, '((T([128, 16, 16, 16], th.float16), [128, 16, 256]), {})'
cnt: 1, '((T([128, 8, 49, 64], th.float16), [1024, 49, 64]), {})'
cnt: 1, '((T([128, 49, 8, 16], th.float16), [128, 49, 128]), {})'
Operator: aten.add.Tensor
cnt: 4, '((T([128, 4, 196, 196], th.float16), T([4, 196, 196], th.float16)), {})'
cnt: 8, '((T([128, 196, 128], th.float16, (25088, 1, 196)), T([128, 196, 128], th.float16)), {})'
cnt: 1, '((T([128, 8, 49, 196], th.float16), T([8, 49, 196], th.float16)), {})'
cnt: 19, '((T([128, 49, 256], th.float16), T([128, 49, 256], th.float16)), {})'
cnt: 4, '((T([128, 8, 49, 49], th.float16), T([8, 49, 49], th.float16)), {})'
cnt: 1, '((T([128, 16, 16, 49], th.float16), T([16, 16, 49], th.float16)), {})'
cnt: 18, '((T([128, 16, 384], th.float16), T([128, 16, 384], th.float16)), {})'
cnt: 4, '((T([128, 12, 16, 16], th.float16), T([12, 16, 16], th.float16)), {})'
cnt: 1, '((T([128, 1000], th.float16), T([128, 1000], th.float16)), {})'
cnt: 1, '((T([128, 384], th.float16), T([128, 384], th.float16)), {})'
cnt: 9, '((T([128, 196, 128], th.float16), T([128, 196, 128], th.float16)), {})'
Operator: aten.add_.Tensor
cnt: 64, '((T([], th.int64), 1), {})'
Operator: aten.addmm.default
cnt: 2, '((T([1000], th.float16), T([128, 384], th.float16), T([384, 1000], th.float16, (1, 384))), {})'
Operator: aten.bmm.default
cnt: 8, '((T([128, 196, 128], th.float16, (25088, 1, 196)), T([128, 128, 256], th.float16, (0, 1, 128))), {})'
cnt: 4, '((T([512, 196, 16], th.float16), T([512, 16, 196], th.float16)), {})'
cnt: 4, '((T([512, 196, 196], th.float16), T([512, 196, 32], th.float16)), {})'
cnt: 1, '((T([128, 196, 128], th.float16, (25088, 1, 196)), T([128, 128, 640], th.float16, (0, 1, 128))), {})'
cnt: 1, '((T([1024, 49, 16], th.float16), T([1024, 16, 196], th.float16)), {})'
cnt: 1, '((T([1024, 49, 196], th.float16), T([1024, 196, 64], th.float16)), {})'
cnt: 4, '((T([1024, 49, 16], th.float16), T([1024, 16, 49], th.float16)), {})'
cnt: 4, '((T([1024, 49, 49], th.float16), T([1024, 49, 32], th.float16)), {})'
cnt: 1, '((T([2048, 16, 16], th.float16), T([2048, 16, 49], th.float16)), {})'
cnt: 1, '((T([2048, 16, 49], th.float16), T([2048, 49, 64], th.float16)), {})'
cnt: 4, '((T([1536, 16, 16], th.float16), T([1536, 16, 16], th.float16)), {})'
cnt: 4, '((T([1536, 16, 16], th.float16), T([1536, 16, 32], th.float16)), {})'
cnt: 4, '((T([1536, 16, 16], th.float16, (256, 1, 16)), T([1536, 16, 32], th.float16)), {})'
cnt: 4, '((T([1536, 16, 32], th.float16), T([1536, 32, 16], th.float16, (512, 1, 32))), {})'
cnt: 4, '((T([1536, 16, 16], th.float16, (256, 1, 16)), T([1536, 16, 16], th.float16)), {})'
cnt: 4, '((T([1536, 16, 16], th.float16), T([1536, 16, 16], th.float16, (256, 1, 16))), {})'
cnt: 1, '((T([2048, 49, 16], th.float16, (784, 1, 49)), T([2048, 16, 64], th.float16)), {})'
cnt: 1, '((T([2048, 16, 64], th.float16), T([2048, 64, 49], th.float16, (3136, 1, 64))), {})'
cnt: 1, '((T([2048, 16, 16], th.float16, (256, 1, 16)), T([2048, 16, 49], th.float16)), {})'
cnt: 1, '((T([2048, 16, 49], th.float16), T([2048, 49, 16], th.float16, (784, 1, 49))), {})'
cnt: 4, '((T([1024, 49, 49], th.float16, (2401, 1, 49)), T([1024, 49, 32], th.float16)), {})'
cnt: 4, '((T([1024, 49, 32], th.float16), T([1024, 32, 49], th.float16, (1568, 1, 32))), {})'
cnt: 4, '((T([1024, 16, 49], th.float16, (784, 1, 16)), T([1024, 49, 49], th.float16)), {})'
cnt: 4, '((T([1024, 49, 49], th.float16), T([1024, 49, 16], th.float16, (784, 1, 49))), {})'
cnt: 1, '((T([1024, 196, 49], th.float16, (9604, 1, 196)), T([1024, 49, 64], th.float16)), {})'
cnt: 1, '((T([1024, 49, 64], th.float16), T([1024, 64, 196], th.float16, (12544, 1, 64))), {})'
cnt: 1, '((T([1024, 16, 49], th.float16, (784, 1, 16)), T([1024, 49, 196], th.float16)), {})'
cnt: 1, '((T([1024, 49, 196], th.float16), T([1024, 196, 16], th.float16, (3136, 1, 196))), {})'
cnt: 1, '((T([128, 128, 196], th.float16), T([128, 196, 640], th.float16)), {})'
cnt: 1, '((T([128, 196, 640], th.float16), T([128, 640, 128], th.float16, (0, 128, 1))), {})'
cnt: 8, '((T([128, 128, 196], th.float16), T([128, 196, 256], th.float16)), {})'
cnt: 8, '((T([128, 196, 256], th.float16), T([128, 256, 128], th.float16, (0, 128, 1))), {})'
cnt: 4, '((T([512, 196, 196], th.float16, (38416, 1, 196)), T([512, 196, 32], th.float16)), {})'
cnt: 4, '((T([512, 196, 32], th.float16), T([512, 32, 196], th.float16, (6272, 1, 32))), {})'
cnt: 4, '((T([512, 16, 196], th.float16, (3136, 1, 16)), T([512, 196, 196], th.float16)), {})'
cnt: 4, '((T([512, 196, 196], th.float16), T([512, 196, 16], th.float16, (3136, 1, 196))), {})'
Operator: aten.cat.default
cnt: 4, '(([T([128, 16, 12, 16], th.float16, (3072, 16, 256, 1)), T([128, 16, 12, 16], th.float16, (3072, 1, 256, 16)), T([128, 16, 12, 32], th.float16, (6144, 32, 512, 1))], 3), {})'
cnt: 1, '(([T([128, 49, 16, 16], th.float16, (12544, 1, 784, 49)), T([128, 49, 16, 64], th.float16, (50176, 64, 3136, 1))], 3), {})'
cnt: 4, '(([T([128, 49, 8, 16], th.float16, (6272, 16, 784, 1)), T([128, 49, 8, 16], th.float16, (6272, 1, 784, 49)), T([128, 49, 8, 32], th.float16, (12544, 32, 1568, 1))], 3), {})'
cnt: 1, '(([T([128, 196, 8, 16], th.float16, (25088, 1, 3136, 196)), T([128, 196, 8, 64], th.float16, (100352, 64, 12544, 1))], 3), {})'
cnt: 4, '(([T([128, 196, 4, 16], th.float16, (12544, 16, 3136, 1)), T([128, 196, 4, 16], th.float16, (12544, 1, 3136, 196)), T([128, 196, 4, 32], th.float16, (25088, 32, 6272, 1))], 3), {})'
Operator: aten.clone.default
cnt: 1, '((T([128, 3, 224, 224], th.float16),), {})'
Operator: aten.convolution.default
cnt: 1, '((T([128, 3, 224, 224], th.float16), T([16, 3, 3, 3], th.float16), None, [2, 2], [1, 1], [1, 1], False, [0, 0], 1), {})'
cnt: 1, '((T([128, 16, 112, 112], th.float16), T([32, 16, 3, 3], th.float16), None, [2, 2], [1, 1], [1, 1], False, [0, 0], 1), {})'
cnt: 1, '((T([128, 32, 56, 56], th.float16), T([64, 32, 3, 3], th.float16), None, [2, 2], [1, 1], [1, 1], False, [0, 0], 1), {})'
cnt: 1, '((T([128, 64, 28, 28], th.float16), T([128, 64, 3, 3], th.float16), None, [2, 2], [1, 1], [1, 1], False, [0, 0], 1), {})'
Operator: aten.convolution_backward.default
cnt: 1, '((T([128, 128, 14, 14], th.float16), T([128, 64, 28, 28], th.float16), T([128, 64, 3, 3], th.float16), [0], [2, 2], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False]), {})'
cnt: 1, '((T([128, 64, 28, 28], th.float16), T([128, 32, 56, 56], th.float16), T([64, 32, 3, 3], th.float16), [0], [2, 2], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False]), {})'
cnt: 1, '((T([128, 32, 56, 56], th.float16), T([128, 16, 112, 112], th.float16), T([32, 16, 3, 3], th.float16), [0], [2, 2], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False]), {})'
cnt: 1, '((T([128, 16, 112, 112], th.float16), T([128, 3, 224, 224], th.float16), T([16, 3, 3, 3], th.float16), [0], [2, 2], [1, 1], [1, 1], False, [0, 0], 1, [False, True, False]), {})'
Operator: aten.copy_.default
cnt: 1, '((T([128, 3, 224, 224], th.float16), T([128, 3, 224, 224], th.float16)), {})'
cnt: 1, '((T([640, 128], th.float16), T([640, 128], th.float16, (1, 640))), {})'
cnt: 8, '((T([256, 128], th.float16), T([256, 128], th.float16, (1, 256))), {})'
Operator: aten.div.Scalar
cnt: 1, '((T([128, 16, 384], th.float16, (384, 0, 1)), 16), {})'
Operator: aten.div.Tensor
cnt: 2, '((T([128, 1000], th.float16), 2), {})'
Operator: aten.hardswish.default
cnt: 1, '((T([128, 16, 112, 112], th.float16),), {})'
cnt: 1, '((T([128, 32, 56, 56], th.float16),), {})'
cnt: 1, '((T([128, 64, 28, 28], th.float16),), {})'
cnt: 4, '((T([128, 196, 128], th.float16),), {})'
cnt: 4, '((T([128, 196, 256], th.float16),), {})'
cnt: 6, '((T([128, 49, 512], th.float16),), {})'
cnt: 4, '((T([128, 49, 256], th.float16),), {})'
cnt: 1, '((T([128, 16, 1024], th.float16),), {})'
cnt: 5, '((T([128, 16, 768], th.float16),), {})'
cnt: 4, '((T([128, 16, 384], th.float16),), {})'
Operator: aten.hardswish_backward.default
cnt: 5, '((T([128, 16, 768], th.float16), T([128, 16, 768], th.float16)), {})'
cnt: 4, '((T([128, 16, 384], th.float16), T([128, 16, 384], th.float16)), {})'
cnt: 1, '((T([128, 16, 1024], th.float16), T([128, 16, 1024], th.float16)), {})'
cnt: 6, '((T([128, 49, 512], th.float16), T([128, 49, 512], th.float16)), {})'
cnt: 4, '((T([128, 49, 256], th.float16), T([128, 49, 256], th.float16)), {})'
cnt: 4, '((T([128, 196, 256], th.float16), T([128, 196, 256], th.float16)), {})'
cnt: 4, '((T([128, 196, 128], th.float16), T([128, 196, 128], th.float16)), {})'
cnt: 1, '((T([128, 64, 28, 28], th.float16), T([128, 64, 28, 28], th.float16)), {})'
cnt: 1, '((T([128, 32, 56, 56], th.float16), T([128, 32, 56, 56], th.float16)), {})'
cnt: 1, '((T([128, 16, 112, 112], th.float16), T([128, 16, 112, 112], th.float16)), {})'
Operator: aten.index.Tensor
cnt: 4, '((T([4, 196], th.float16), [None, T([196, 196], th.int64)]), {})'
cnt: 1, '((T([8, 196], th.float16), [None, T([49, 196], th.int64)]), {})'
cnt: 4, '((T([8, 49], th.float16), [None, T([49, 49], th.int64)]), {})'
cnt: 1, '((T([16, 49], th.float16), [None, T([16, 49], th.int64)]), {})'
cnt: 4, '((T([12, 16], th.float16), [None, T([16, 16], th.int64)]), {})'
Operator: aten.mean.dim
cnt: 1, '((T([128, 16, 384], th.float16), [1]), {})'
Operator: aten.mm.default
cnt: 4, '((T([25088, 128], th.float16), T([128, 128], th.float16, (1, 128))), {})'
cnt: 4, '((T([25088, 256], th.float16), T([256, 128], th.float16, (1, 256))), {})'
cnt: 1, '((T([6272, 128], th.float16), T([128, 128], th.float16, (1, 128))), {})'
cnt: 6, '((T([6272, 512], th.float16), T([512, 256], th.float16, (1, 512))), {})'
cnt: 9, '((T([6272, 256], th.float16), T([256, 512], th.float16, (1, 256))), {})'
cnt: 4, '((T([6272, 256], th.float16), T([256, 256], th.float16, (1, 256))), {})'
cnt: 1, '((T([6272, 256], th.float16), T([256, 1280], th.float16, (1, 256))), {})'
cnt: 1, '((T([2048, 256], th.float16), T([256, 256], th.float16, (1, 256))), {})'
cnt: 1, '((T([2048, 1024], th.float16), T([1024, 384], th.float16, (1, 1024))), {})'
cnt: 9, '((T([2048, 384], th.float16), T([384, 768], th.float16, (1, 384))), {})'
cnt: 5, '((T([2048, 768], th.float16), T([768, 384], th.float16, (1, 768))), {})'
cnt: 4, '((T([2048, 384], th.float16), T([384, 384], th.float16, (1, 384))), {})'
cnt: 2, '((T([128, 1000], th.float16), T([1000, 384], th.float16)), {})'
cnt: 2, '((T([1000, 128], th.float16, (1, 1000)), T([128, 384], th.float16)), {})'
cnt: 5, '((T([384, 2048], th.float16, (1, 384)), T([2048, 768], th.float16)), {})'
cnt: 5, '((T([2048, 384], th.float16), T([384, 768], th.float16)), {})'
cnt: 9, '((T([768, 2048], th.float16, (1, 768)), T([2048, 384], th.float16)), {})'
cnt: 9, '((T([2048, 768], th.float16), T([768, 384], th.float16)), {})'
cnt: 4, '((T([384, 2048], th.float16, (1, 384)), T([2048, 384], th.float16)), {})'
cnt: 4, '((T([2048, 384], th.float16), T([384, 384], th.float16)), {})'
cnt: 1, '((T([384, 2048], th.float16, (1, 384)), T([2048, 1024], th.float16)), {})'
cnt: 1, '((T([2048, 384], th.float16), T([384, 1024], th.float16)), {})'
cnt: 1, '((T([256, 2048], th.float16, (1, 256)), T([2048, 256], th.float16)), {})'
cnt: 1, '((T([2048, 256], th.float16), T([256, 256], th.float16)), {})'
cnt: 1, '((T([1280, 6272], th.float16, (1, 1280)), T([6272, 256], th.float16)), {})'
cnt: 1, '((T([6272, 1280], th.float16), T([1280, 256], th.float16)), {})'
cnt: 6, '((T([256, 6272], th.float16, (1, 256)), T([6272, 512], th.float16)), {})'
cnt: 6, '((T([6272, 256], th.float16), T([256, 512], th.float16)), {})'
cnt: 9, '((T([512, 6272], th.float16, (1, 512)), T([6272, 256], th.float16)), {})'
cnt: 9, '((T([6272, 512], th.float16), T([512, 256], th.float16)), {})'
cnt: 4, '((T([256, 6272], th.float16, (1, 256)), T([6272, 256], th.float16)), {})'
cnt: 4, '((T([6272, 256], th.float16), T([256, 256], th.float16)), {})'
cnt: 1, '((T([128, 6272], th.float16, (1, 128)), T([6272, 128], th.float16)), {})'
cnt: 1, '((T([6272, 128], th.float16), T([128, 128], th.float16)), {})'
cnt: 4, '((T([128, 25088], th.float16, (1, 128)), T([25088, 256], th.float16)), {})'
cnt: 4, '((T([25088, 128], th.float16), T([128, 256], th.float16)), {})'
cnt: 4, '((T([128, 25088], th.float16, (1, 128)), T([25088, 128], th.float16)), {})'
cnt: 4, '((T([25088, 128], th.float16), T([128, 128], th.float16)), {})'
Operator: aten.mul.Tensor
cnt: 8, '((T([128, 4, 196, 196], th.float16), 0.25), {})'
cnt: 2, '((T([128, 8, 49, 196], th.float16), 0.25), {})'
cnt: 8, '((T([128, 8, 49, 49], th.float16), 0.25), {})'
cnt: 2, '((T([128, 16, 16, 49], th.float16), 0.25), {})'
cnt: 8, '((T([128, 12, 16, 16], th.float16), 0.25), {})'
Operator: aten.native_batch_norm.default
cnt: 1, '((T([128, 16, 112, 112], th.float16), T([16], th.float16), T([16], th.float16), T([16], th.float16), T([16], th.float16), True, 0.1, 1e-05), {})'
cnt: 1, '((T([128, 32, 56, 56], th.float16), T([32], th.float16), T([32], th.float16), T([32], th.float16), T([32], th.float16), True, 0.1, 1e-05), {})'
cnt: 1, '((T([128, 64, 28, 28], th.float16), T([64], th.float16), T([64], th.float16), T([64], th.float16), T([64], th.float16), True, 0.1, 1e-05), {})'
cnt: 1, '((T([128, 128, 14, 14], th.float16), T([128], th.float16), T([128], th.float16), T([128], th.float16), T([128], th.float16), True, 0.1, 1e-05), {})'
cnt: 8, '((T([25088, 256], th.float16), T([256], th.float16), T([256], th.float16), T([256], th.float16), T([256], th.float16), True, 0.1, 1e-05), {})'
cnt: 8, '((T([25088, 128], th.float16), T([128], th.float16), T([128], th.float16), T([128], th.float16), T([128], th.float16), True, 0.1, 1e-05), {})'
cnt: 1, '((T([25088, 640], th.float16), T([640], th.float16), T([640], th.float16), T([640], th.float16), T([640], th.float16), True, 0.1, 1e-05), {})'
cnt: 1, '((T([6272, 128], th.float16), T([128], th.float16), T([128], th.float16), T([128], th.float16), T([128], th.float16), True, 0.1, 1e-05), {})'
cnt: 10, '((T([6272, 256], th.float16), T([256], th.float16), T([256], th.float16), T([256], th.float16), T([256], th.float16), True, 0.1, 1e-05), {})'
cnt: 9, '((T([6272, 512], th.float16), T([512], th.float16), T([512], th.float16), T([512], th.float16), T([512], th.float16), True, 0.1, 1e-05), {})'
cnt: 1, '((T([6272, 1280], th.float16), T([1280], th.float16), T([1280], th.float16), T([1280], th.float16), T([1280], th.float16), True, 0.1, 1e-05), {})'
cnt: 1, '((T([2048, 256], th.float16), T([256], th.float16), T([256], th.float16), T([256], th.float16), T([256], th.float16), True, 0.1, 1e-05), {})'
cnt: 10, '((T([2048, 384], th.float16), T([384], th.float16), T([384], th.float16), T([384], th.float16), T([384], th.float16), True, 0.1, 1e-05), {})'
cnt: 9, '((T([2048, 768], th.float16), T([768], th.float16), T([768], th.float16), T([768], th.float16), T([768], th.float16), True, 0.1, 1e-05), {})'
cnt: 2, '((T([128, 384], th.float16), T([384], th.float16), T([384], th.float16), T([384], th.float16), T([384], th.float16), True, 0.1, 1e-05), {})'
Operator: aten.native_batch_norm_backward.default
cnt: 2, '((T([128, 384], th.float16), T([128, 384], th.float16), T([384], th.float16), T([384], th.float16), T([384], th.float16), T([384], th.float32), T([384], th.float32), True, 1e-05, [True, True, True]), {})'
cnt: 10, '((T([2048, 384], th.float16), T([2048, 384], th.float16), T([384], th.float16), T([384], th.float16), T([384], th.float16), T([384], th.float32), T([384], th.float32), True, 1e-05, [True, True, True]), {})'
cnt: 9, '((T([2048, 768], th.float16), T([2048, 768], th.float16), T([768], th.float16), T([768], th.float16), T([768], th.float16), T([768], th.float32), T([768], th.float32), True, 1e-05, [True, True, True]), {})'
cnt: 1, '((T([2048, 256], th.float16), T([2048, 256], th.float16), T([256], th.float16), T([256], th.float16), T([256], th.float16), T([256], th.float32), T([256], th.float32), True, 1e-05, [True, True, True]), {})'
cnt: 1, '((T([6272, 1280], th.float16), T([6272, 1280], th.float16), T([1280], th.float16), T([1280], th.float16), T([1280], th.float16), T([1280], th.float32), T([1280], th.float32), True, 1e-05, [True, True, True]), {})'
cnt: 10, '((T([6272, 256], th.float16), T([6272, 256], th.float16), T([256], th.float16), T([256], th.float16), T([256], th.float16), T([256], th.float32), T([256], th.float32), True, 1e-05, [True, True, True]), {})'
cnt: 9, '((T([6272, 512], th.float16), T([6272, 512], th.float16), T([512], th.float16), T([512], th.float16), T([512], th.float16), T([512], th.float32), T([512], th.float32), True, 1e-05, [True, True, True]), {})'
cnt: 1, '((T([6272, 128], th.float16), T([6272, 128], th.float16), T([128], th.float16), T([128], th.float16), T([128], th.float16), T([128], th.float32), T([128], th.float32), True, 1e-05, [True, True, True]), {})'
cnt: 1, '((T([25088, 640], th.float16), T([25088, 640], th.float16), T([640], th.float16), T([640], th.float16), T([640], th.float16), T([640], th.float32), T([640], th.float32), True, 1e-05, [True, True, True]), {})'
cnt: 8, '((T([25088, 128], th.float16), T([25088, 128], th.float16), T([128], th.float16), T([128], th.float16), T([128], th.float16), T([128], th.float32), T([128], th.float32), True, 1e-05, [True, True, True]), {})'
cnt: 8, '((T([25088, 256], th.float16), T([25088, 256], th.float16), T([256], th.float16), T([256], th.float16), T([256], th.float16), T([256], th.float32), T([256], th.float32), True, 1e-05, [True, True, True]), {})'
cnt: 1, '((T([128, 128, 14, 14], th.float16, (25088, 1, 1792, 128)), T([128, 128, 14, 14], th.float16), T([128], th.float16), T([128], th.float16), T([128], th.float16), T([128], th.float32), T([128], th.float32), True, 1e-05, [True, True, True]), {})'
cnt: 1, '((T([128, 64, 28, 28], th.float16), T([128, 64, 28, 28], th.float16), T([64], th.float16), T([64], th.float16), T([64], th.float16), T([64], th.float32), T([64], th.float32), True, 1e-05, [True, True, True]), {})'
cnt: 1, '((T([128, 32, 56, 56], th.float16), T([128, 32, 56, 56], th.float16), T([32], th.float16), T([32], th.float16), T([32], th.float16), T([32], th.float32), T([32], th.float32), True, 1e-05, [True, True, True]), {})'
cnt: 1, '((T([128, 16, 112, 112], th.float16), T([128, 16, 112, 112], th.float16), T([16], th.float16), T([16], th.float16), T([16], th.float16), T([16], th.float32), T([16], th.float32), True, 1e-05, [True, True, True]), {})'
Operator: aten.new_empty_strided.default
cnt: 1, '((T([640, 128], th.float16, (1, 640)), [640, 128], [128, 1]), {\'device\': "th.device(\'cuda\')", \'dtype\': th.float16, \'layout\': th.strided})'
cnt: 8, '((T([256, 128], th.float16, (1, 256)), [256, 128], [128, 1]), {\'device\': "th.device(\'cuda\')", \'dtype\': th.float16, \'layout\': th.strided})'
Operator: aten.new_zeros.default
cnt: 4, '((T([12, 16, 16], th.float16), [12, 16]), {\'device\': "th.device(\'cuda\')", \'dtype\': th.float16, \'layout\': th.strided})'
cnt: 1, '((T([16, 16, 49], th.float16), [16, 49]), {\'device\': "th.device(\'cuda\')", \'dtype\': th.float16, \'layout\': th.strided})'
cnt: 4, '((T([8, 49, 49], th.float16), [8, 49]), {\'device\': "th.device(\'cuda\')", \'dtype\': th.float16, \'layout\': th.strided})'
cnt: 1, '((T([8, 49, 196], th.float16), [8, 196]), {\'device\': "th.device(\'cuda\')", \'dtype\': th.float16, \'layout\': th.strided})'
cnt: 4, '((T([4, 196, 196], th.float16), [4, 196]), {\'device\': "th.device(\'cuda\')", \'dtype\': th.float16, \'layout\': th.strided})'
Operator: aten.nll_loss_backward.default
cnt: 1, '((T([], th.float16), T([128, 1000], th.float16), T([128], th.int64), None, 1, -100, T([], th.float16)), {})'
Operator: aten.nll_loss_forward.default
cnt: 1, '((T([128, 1000], th.float16), T([128], th.int64), None, 1, -100), {})'
Operator: aten.slice_backward.default
cnt: 4, '((T([12, 16], th.float16), [12, 16], 0, 0, 9223372036854775807, 1), {})'
cnt: 1, '((T([16, 49], th.float16), [16, 49], 0, 0, 9223372036854775807, 1), {})'
cnt: 1, '((T([128, 4, 4, 256], th.float16), [128, 4, 7, 256], 2, 0, 9223372036854775807, 2), {})'
cnt: 1, '((T([128, 4, 7, 256], th.float16), [128, 7, 7, 256], 1, 0, 9223372036854775807, 2), {})'
cnt: 1, '((T([128, 7, 7, 256], th.float16), [128, 7, 7, 256], 0, 0, 9223372036854775807, 1), {})'
cnt: 4, '((T([8, 49], th.float16), [8, 49], 0, 0, 9223372036854775807, 1), {})'
cnt: 1, '((T([8, 196], th.float16), [8, 196], 0, 0, 9223372036854775807, 1), {})'
cnt: 1, '((T([128, 7, 7, 128], th.float16), [128, 7, 14, 128], 2, 0, 9223372036854775807, 2), {})'
cnt: 1, '((T([128, 7, 14, 128], th.float16), [128, 14, 14, 128], 1, 0, 9223372036854775807, 2), {})'
cnt: 1, '((T([128, 14, 14, 128], th.float16), [128, 14, 14, 128], 0, 0, 9223372036854775807, 1), {})'
cnt: 4, '((T([4, 196], th.float16), [4, 196], 0, 0, 9223372036854775807, 1), {})'
Operator: aten.split_with_sizes.default
cnt: 4, '((T([128, 196, 4, 64], th.float16), [16, 16, 32], 3), {})'
cnt: 1, '((T([128, 196, 8, 80], th.float16), [16, 64], 3), {})'
cnt: 4, '((T([128, 49, 8, 64], th.float16), [16, 16, 32], 3), {})'
cnt: 1, '((T([128, 49, 16, 80], th.float16), [16, 64], 3), {})'
cnt: 4, '((T([128, 16, 12, 64], th.float16), [16, 16, 32], 3), {})'
Operator: aten.sum.SymInt
cnt: 2, '((T([128, 1000], th.float16), [0], True), {})'
cnt: 4, '((T([128, 12, 16, 16], th.float16), [0], True), {})'
cnt: 1, '((T([128, 16, 16, 49], th.float16), [0], True), {})'
cnt: 4, '((T([128, 8, 49, 49], th.float16), [0], True), {})'
cnt: 1, '((T([128, 8, 49, 196], th.float16), [0], True), {})'
cnt: 1, '((T([128, 128, 640], th.float16), [0], True), {})'
cnt: 8, '((T([128, 128, 256], th.float16), [0], True), {})'
cnt: 4, '((T([128, 4, 196, 196], th.float16), [0], True), {})'
